@page "/SubmitAssistant"
@using System.IO
@using System.Threading
@using CFPABot.DiffEngine
@using CFPABot.Exceptions
@using CFPABot.PRData
@using CFPABot.Utils
@using CurseForge.APIClient.Models.Mods
@using GammaLibrary.Extensions
@using Microsoft.AspNetCore.Http
@using System.Collections.Immutable
@implements IDisposable
@inject IBlazorStrap _blazorStrap
@inject IHttpContextAccessor _http
@inject NavigationManager _navigationManager
<PageTitle>模组翻译快捷上传</PageTitle>
<BSToaster />
<h1>模组翻译快捷上传</h1>
<BSLabel MarginBottom="Margins.Medium" Class="@BS.Text_Info">如果你遇到了什么问题，可以在 CFPA 群中 @@Cyl18 反馈，或者前往 <BSLink Url="https://github.com/Cyl18/CFPABot/issues">这里</BSLink> 提交 Issue。</BSLabel>
<br/>


@if (LoginManager.GetLoginStatus(_http))
{
    @code{
    string userName = "[加载中]";
    string userAvatar = "";
    void GetName()
    {
        userName = (LoginManager.GetGitHubClient(_http).User.Current().Result).Login;
    }
    void GetAvatar()
    {
        userAvatar = (LoginManager.GetGitHubClient(_http).User.Current().Result).AvatarUrl;
    }

    protected override async Task OnInitializedAsync()
    {
        if (LoginManager.GetLoginStatus(_http))
        Task.Run(() =>
        {
            GetName();
            GetAvatar();
            InvokeAsync(StateHasChanged);
        });
        Task.Run(async () =>
        {
            while (PRDataManager.RefreshCount != 0)
            {
                await Task.Delay(100);
            }
            ready = true;
            InvokeAsync(StateHasChanged);
        });

    }

    }
    <BSImage style="width: 50px;" Source="@userAvatar" MarginBottom="Margins.Small"></BSImage>
    <BSLabel MarginBottom="Margins.Medium">登录账号: @(userName) <BSLink Url="/api/GitHubOAuth/Signout">登出</BSLink></BSLabel>
}
else
{
    <BSAlert Color="BSColor.Danger" HasIcon="true" MarginBottom="Margins.Medium">你还没有登录.</BSAlert>
    <BSButton MarginBottom="Margins.ExtraLarge" Color="BSColor.Primary" OnClick="() => _navigationManager.NavigateTo(LoginManager.LoginUrl)">GitHub 登录</BSButton>

}
@code
{
    void ShowToast(string text)
    {
        _blazorStrap.Toaster.Add("警告", text, o =>
        {
            o.Color = BSColor.Warning;
            o.HasIcon = true;
            o.Toast = Toast.TopRight;
        });
    }
}

@code {
    int step = -1;
    bool ready = false;

}

<BSAlert Class="fade-in" Color="BSColor.Info" HasIcon="true">在提交翻译以前，请看看<BSAlertLink Url="https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/blob/main/CONTRIBUTING.md">贡献指南</BSAlertLink>。</BSAlert>

@if (!ready)
{
    <BSAlert Class="fade-in" Color="BSColor.Warning" HasIcon="true" MarginTop="Margins.Medium">正在刷新 PR 间关系..这不需要很久</BSAlert>

}

@if (step == -1 && LoginManager.GetLoginStatus(_http) && ready)
{
    <BSCard Class="fade-in" CardType="CardType.Card" MarginTop="Margins.Large" style="width: 60rem;">
        <BSCard CardType="CardType.Body">
            <BSLabel Size="Size.Large" MarginBottom="Margins.Medium">检查</BSLabel>
            <div Class="@BS.Form_Check" MarginBottom="Margins.Small">
                <BSInputCheckbox CheckedValue="true" id="c1" @bind-Value="readContributing" />
                <BSLabel for="c1" IsCheckLabel="true">你最好读一读 <BSLink Url="https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/blob/main/CONTRIBUTING.md">贡献指南</BSLink></BSLabel>
            </div>

            <div Class="@BS.Form_Check" MarginBottom="Margins.Medium">
                <BSInputCheckbox id="c2" CheckedValue="true" @bind-Value="ccbyncsa" />
                <BSLabel for="c2" IsCheckLabel="true">你已阅读并同意按 <BSLink Url="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">CC BY-NC-SA 4.0</BSLink> 协议发布你的作品</BSLabel>
            </div>
            
            <div Class="@BS.Form_Check" MarginBottom="Margins.Medium">
                <BSInputCheckbox id="c3" CheckedValue="true" @bind-Value="机翻" />
                <BSLabel for="c3" IsCheckLabel="true">我们不接收生硬翻译，机器翻译。如果你是机器翻译，请放弃此次提交，生硬翻译和机器翻译不会被接收；机翻加润色是可以接受的</BSLabel>
            </div>

            <div Class="@BS.Form_Check" MarginBottom="Margins.Medium">
                <BSInputCheckbox id="c4" CheckedValue="true" @bind-Value="自己制作" />
                <BSLabel for="c4" IsCheckLabel="true">你确认是你自己制作的文件而不是搬运其他人的文件，也不是代提交</BSLabel>
            </div>
            <BSButton Color="BSColor.Success" OnClick="CheckRequirements" MarginTop="Margins.Medium">继续</BSButton>

            
            @code
            {
                bool readContributing = false;
                bool ccbyncsa = false;
                bool 机翻 = false;
                bool 自己制作 = false;


                void CheckRequirements()
                {
            if (!(readContributing && ccbyncsa && 机翻 && 自己制作))
                    {
                        ShowToast("请把那几个复选框勾上（");
                        return;
                    }
                    step++;
                }

            }
        </BSCard>
    </BSCard>

}

@if (step == 0)
{
    <BSCard Class="fade-in" CardType="CardType.Card" MarginTop="Margins.Large" style="width: 60rem;">
        <BSCard CardType="CardType.Body">
            <BSLabel Size="Size.Large" MarginBottom="Margins.Medium">上传文件</BSLabel>


            <BSContainer MarginBottom="Margins.Medium">
                <div Class="@BS.Form_Check">
                    <BSInputRadio CheckedValue="@(UploadMode.Lang)" @bind-Value="_uploadMode" />
                    <BSLabel IsCheckLabel="true">中英文文件上传</BSLabel>
                </div>

                <div Class="@BS.Form_Check">
                    <BSInputRadio CheckedValue="@(UploadMode.Zip)" @bind-Value="_uploadMode" />
                    <BSLabel IsCheckLabel="true">压缩包上传</BSLabel>
                </div>
            </BSContainer>

            @code {

        enum UploadMode
        {
            Lang,
            Zip,
        }

        private UploadMode _uploadMode { get; set; } = UploadMode.Lang;
        }

        @if (_uploadMode == UploadMode.Lang)
            {
                <BSContainer MarginBottom="Margins.Medium">
                    <BSRow MarginBottom="Margins.Small">
                        <BSCol Column="3" Class="border">
                            <BSLabel Margin="Margins.Auto">英文语言文件
                                <code>(en_us.json/lang)</code>
                            </BSLabel>
                        </BSCol>
                        <BSCol Column="6" Class="border">
                            <BSInputFile accept="en_us.json,en_us.lang" Margin="Margins.Small" MarginTop="Margins.Small" ValidWhen="() => true" OnChange="OnFileChangeEn" />
                        </BSCol>
                    </BSRow>
                    <BSRow MarginBottom="Margins.Small">
                        <BSCol Column="3" Class="border">
                            <BSLabel Margin="Margins.Auto">中文语言文件 <code>(zh_cn.json/lang)</code></BSLabel>
                        </BSCol>
                        <BSCol Column="6" Class="border">
                            <BSInputFile accept="zh_cn.json,zh_cn.lang" Margin="Margins.Small" MarginTop="Margins.Small" ValidWhen="() => true" OnChange="OnFileChangeCn" />
                        </BSCol>
                    </BSRow>
                    <BSLabel>提示：你可以通过拖拽上传~</BSLabel>
                </BSContainer>
                <BSButton Color="BSColor.Success" OnClick="ContinueWithLang">继续</BSButton>
                @code {

        void ContinueWithLang()
        {
            if (cnCache == null || enCache == null)
            {
                ShowToast("文件没有上传完成");
                return;
            }
            step++;
        }

        }
            }
        </BSCard>
    </BSCard>
}


@if (step == 1)
{
    <BSCard Class="fade-in" CardType="CardType.Card" style="width: 60rem;">
        <BSCard CardType="CardType.Body">
            <BSLabel Size="Size.Large" MarginBottom="Margins.Small">Yum</BSLabel>
            <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">
                <span class="@BS.Input_Group_Text">Minecraft 版本</span>
                <BSInput InputType="InputType.Select" InputSize="Size.Medium" MarginBottom="Margins.Medium" @bind-Value="imcVersion">
                    <option value=" " disabled>选择版本</option>
                    @foreach (var x in mcVersions)
                    {
                        <option value="@x">@x</option>
                    }
                </BSInput>
            </BSInputGroup>

            <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">
                <span class="@BS.Input_Group_Text">CurseForge 项目名或链接</span>
                <BSInput TValue="string" InputType="InputType.Text" OnValueChange="(x) => curseForgeSlug = x" />
            </BSInputGroup>
            <BSAlert Color="BSColor.Info" HasIcon="true" MarginBottom="Margins.Medium">
                例如： <code>https://www.curseforge.com/minecraft/mc-mods/applied-energistics-2</code> &nbsp;或&nbsp; <code>applied-energistics-2</code>
            </BSAlert>
            <BSButton Color="BSColor.Success" OnClick="verifySlug">验证</BSButton>



            @code
            {
                MCVersion? _mcVersion
                {
                    get => imcVersion.IsNullOrWhiteSpace() ? null : imcVersion.ToMCVersion();
                }
                string imcVersion = " ";

                string[] mcVersions = Enum.GetValues<MCVersion>().Select(x => x.ToVersionString()).ToArray();

                string curseForgeSlug = "";
                bool inputProjectID = false;
                Mod mod;
                async Task verifySlug()
                {
                    if (_mcVersion == null)
                    {
                        ShowToast("请先选择 Minecraft 的版本喵~");
                        return;
                    }

                    var formattedSlug = trimmedSlug;
                    try
                    {
                        var addon = await CurseManager.GetAddon(formattedSlug);
                        mod = addon;
                        modName = mod.Name;
                        step++;
                        var expire = Task.Delay(10000);

                        var at = Task.Run(async () =>
                        {
                            var modID = await CurseManager.GetModID(addon, _mcVersion, true, false);
                            lock (expire)
                            {
                                if (expire.IsCompleted) return;
                            }
                            
                            netModDomainAcquired = true;
                            if (modID == "未知")
                            {
                                netModDomainError = true;
                            }
                            else
                            {
                                modDomain = modID;
                            }
                            InvokeAsync(StateHasChanged);
                        });
                        StateHasChanged();

                        await Task.WhenAny(expire, at);
                        lock (expire)
                        {
                            if (expire.IsCompleted)
                            {
                                netModDomainAcquired = true;
                                netModDomainError = true;

                            }
                        }
                    }
                    catch (CheckException e)
                    {
                        inputProjectID = true;
                    }
                    catch (Exception e)
                    {
                        ShowToast("验证失败.");
                        ShowToast(e.Message);
                    }
                }

                string curseProjectID { get; set; }  = "";
                string trimmedSlug => curseForgeSlug.Trim().Split('/').Last().ToLower();
            }

                @if (inputProjectID)
                {
                    <BSAlert Color="BSColor.Warning" HasIcon="true" MarginBottom="Margins.Medium">
                        <BSContainer>
                            
                            <p>无法找到 CurseForge 项目名到项目 ID 的映射。</p>
                            <p>请检查此链接能否打开  <BSAlertLink Url="@($"https://www.curseforge.com/minecraft/mc-mods/{(trimmedSlug)}")">这里</BSAlertLink>，</p>
                            <p>并在右侧找到项目 ID 并填写到下面的文本框。<br />如果不能打开，请检查你上方的输入是否正确。</p>
                        </BSContainer>
                    </BSAlert>

                    <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">
                        <span class="@BS.Input_Group_Text">CurseForge 项目 ID</span>
                        <BSInput InputType="InputType.Text" @bind-Value="curseProjectID" />
                    </BSInputGroup>

                    <BSButton Color="BSColor.Success" OnClick="checkProjectID">确认项目 ID</BSButton>

                    @code
                    {
                        async Task checkProjectID()
                        {
                            try
                            {
                                var i = curseProjectID.ToInt();
                                var s = await CurseManager.GetAddon(i);
                                if (s.Slug == trimmedSlug)
                                {
                                    ModIDMappingMetadata.Instance.Mapping[trimmedSlug] = (int)i;
                                    ModIDMappingMetadata.Save();
                                    inputProjectID = false;
                                    ShowToast("验证成功.");
                                }
                                else
                                {
                                    ShowToast("验证失败.");
                                }
                            }
                            catch (Exception e)
                            {
                                ShowToast("验证失败.");
                                ShowToast(e.Message);
                            }
                        }
                    }
                }

        </BSCard>
    </BSCard>
}

@if (step == 2)
{
    <BSCard Class="fade-in" CardType="CardType.Card" style="width: 60rem;">
    <BSCard CardType="CardType.Body">
    @if (!netModDomainAcquired)
    {
        <BSLabel>请稍等...</BSLabel>
    }
    else
    {
        <BSContainer Class="fade-in">
            <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">
                <span class="@BS.Input_Group_Text">Mod Domain</span>
                <BSInput  InputType="InputType.Text" @bind-Value="modDomain"/> 
            </BSInputGroup>
            @if (netModDomainError)
            {
                <BSAlert Color="BSColor.Warning" HasIcon="true" MarginBottom="Margins.Medium">
                    <BSContainer>
                        <p>无法自动获取 Mod Domain。请手动填写并保证其正确性。</p>
                        <p>Mod Domain 的获取方法：使用解压软件打开模组，<br />打开 assets 文件夹，找到内部有你正在翻译文件的 lang 文件夹，</p>
                        <p>例如 <code>assets/jei/lang/en_us.json</code>, <code>jei</code> 便是此模组的 Domain。</p>
                    </BSContainer>
                </BSAlert>
            }
            else
            {
                <BSAlert Color="BSColor.Info" HasIcon="true" MarginBottom="Margins.Medium">
                    <BSContainer>
                        <p>自动找到了模组的 Domain，请检查是否正确。 </p>
                        <p>Mod Domain 的获取方法：使用解压软件打开模组，<br/>打开 assets 文件夹，找到内部有你正在翻译文件的 lang 文件夹，</p >
                        <p>例如 <code>assets/jei/lang/en_us.json</code>, <code>jei</code> 便是此模组的 Domain。</p >
                    </BSContainer>
                </BSAlert>
            }
            <BSButton Color="BSColor.Success" OnClick="FinishModDomain" >下一步</BSButton>
            <BSButton  Color="BSColor.Secondary" OnClick="() => step--">上一步</BSButton>
        </BSContainer>
        
        @code{

            async Task FinishModDomain()
            {
                if (!modDomain.ToCharArray().All(x => char.IsDigit(x) || char.IsLower(x) || x is '_' or '-' or '.'))
                {
                    ShowToast("Mod Domain 验证失败。请检查是否有大写字母和空格。");
                }
                else
                {
                    emails = await LoginManager.GetEmails(_http);
                    step++;
                    prTitle = $"{modName} 翻译提交";
                }
                Task.Run((async () =>
                {
                    var f = PRDataManager.Relation.Where(x => x.Value.Any(y => y.modVersion == ModVersion.FromGameVersionDirectory(_mcVersion.Value.ToVersionString()))).ToImmutableArray();
                    if (!f.Any())
                    {
                        ready2 = true;
                    }
                    else
                    {
                        var flag = false;
                        var hs = new HashSet<int>();
                        var user = await LoginManager.GetGitHubClient(_http).User.Current();
                        foreach (var pair in f.Select(x=>x.Value))
                        {
                            foreach (var (prid, _) in pair)
                            {
                                if (!hs.Add(prid))
                                {
                                    var pr = await GitHub.GetPullRequest(prid);
                                    if (pr.User.Login == user.Login)
                                    {
                                        flag = true;
                                        conflictPRID = prid;
                                        goto end;
                                    }
                                }
                            }
                        }
                        end:
                        if (flag)
                        {
                            prConflict = true;
                        }
                        else
                        {
                            ready2 = true;
                        }
                    }
                    InvokeAsync(StateHasChanged);
                }));
            }

        }
    }
    </BSCard>
    </BSCard>
}
@code{

    bool ready2 = false;
    bool prConflict = false;
    int conflictPRID = -1;

}
@if (step == 3 && !ready2)
{
    <BSCard Class="fade-in" CardType="CardType.Card" style="width: 60rem;">
        <BSCard CardType="CardType.Body">
            @if (!prConflict)
            {
                <BSLabel>请稍等...</BSLabel>
            }
            else
            {
                <BSContainer Class="fade-in">
                    <BSAlert HasIcon="true" Color="BSColor.Warning" MarginBottom="Margins.Medium">
                        <BSContainer>
                            警告：检测到你已经提交过相同模组的 PR #@conflictPRID，<br/>
                            如果你需要修改 PR 的文件，可以通过下面的方法或者使用修改 PR 功能（正在鸽）<br/>
                            重复提交会对审核者造成不便，我们承认修改 PR 文件确实有一些技术门槛（），<br/>
                            如果你实在不想修改的话...也行吧，记得关闭原来的 PR（小声嘀咕）
                        </BSContainer>
                    </BSAlert>
                    <BSImage MarginBottom="Margins.Medium" style="width: 800px;" Source="/Azusa/img/tip1.png"></BSImage>
                    <BSButton Color="BSColor.Danger" OnClick="() => ready2 = true">仍要继续</BSButton>

                </BSContainer>
                
            }
        </BSCard>
    </BSCard>

    
}

@if (step == 3 && ready2)
{
    <BSCard Class="fade-in" CardType="CardType.Card" style="width: 60rem;">
    <BSCard CardType="CardType.Body">
        <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">
            <span class="@BS.Input_Group_Text">PR 标题</span>
            <BSInput TValue="string" InputType="InputType.Text" @bind-Value="prTitle" />

            <BSDropdown Placement="Placement.BottomEnd">
                <Toggler><BSToggle IsButton="true" IsOutlined="true" Color="BSColor.Secondary">建议的标题</BSToggle></Toggler>
                <Content>
                    @code
                    {
        string[] ns = new[] { " 翻译提交", " 翻译更新", " 翻译修正" };
                        void ChangePRTitle(string x) => prTitle = x;
                    }
                    @foreach (var x in ns.Select(y => mod.Name + y))
                    {
                        <BSDropdownItem OnClick="() => ChangePRTitle(x)">@x</BSDropdownItem>
                    }
                </Content>
            </BSDropdown>

        </BSInputGroup>
        
        <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">
            <span class="@BS.Input_Group_Text">你的邮箱</span>
                <BSInput InputType="InputType.Select" InputSize="Size.Medium" MarginBottom="Margins.Medium" @bind-Value="iemail">
                @foreach (var x in emails)
                {
                    <option value="@x">@x</option>
                }
            </BSInput>
        </BSInputGroup>
        

        <BSButton Color="BSColor.Success" OnClick="Submit">开始提交（不发送PR）</BSButton>

        @code{

            string[] emails = new string[0];
            string iemail = null;
            PRCreatorModule prCreatorModule;
            string email => iemail;
            void Submit()
            {
                if (iemail.IsNullOrEmpty())
                {
                    ShowToast("没有选择邮箱");
                    return;
                }
                step++;
                Task.Run(async () =>
                {
                    try
                    {
                        _http.HttpContext.Request.Cookies.TryGetValue("oauth-token", out var token);
                        prCreatorModule = new PRCreatorModule(LoginManager.GetGitHubClient(_http), enCache, cnCache, email, trimmedSlug, _mcVersion.Value.ToVersionString(), prTitle, s =>
                        {
                            finalLogger += "\n";
                            finalLogger += s;
                            InvokeAsync(StateHasChanged);
                        }, token, modDomain);
                        await prCreatorModule.Run();
                        finalLogger += "提交完成";
                        step ++;
                        InvokeAsync(StateHasChanged);

                    }
                    catch (Exception e)
                    {
                        finalLogger += "发生错误: \n";
                        finalLogger += e.Message;
                        InvokeAsync(StateHasChanged);
                    }
                });
            }
        }
    </BSCard>
    </BSCard>
}

<BSCard Class="fade-in" CardType="CardType.Card" style="width: 32rem;" MarginTop="Margins.Medium">
<BSCard CardType="CardType.Body">
    <BSCol>
        模组名: @modName <br/>
        游戏版本: @(_mcVersion?.ToVersionString() ?? "未选择") <br/>
        模组 Slug: @trimmedSlug <br/>
        模组 Domain: @modDomain <br/>
        PR Title: @prTitle <br/>
    </BSCol>
    @if (step >= 4)
    {
        <code style="white-space: pre-line">
            @finalLogger
        </code>
    }
    @if (step == 5)
    {
        <BSContainer MarginBottom="Margins.Medium">
            <BSRow>
                        <BSInputGroup Size="Size.ExtraLarge" MarginTop="Margins.Medium" MarginBottom="Margins.Medium">
                            <span class="@BS.Input_Group_Text">PR 正文</span>
                            <BSInput InputType="InputType.TextArea"  @bind-Value="prBody"></BSInput>
                        </BSInputGroup>
                <BSButton Color="BSColor.Success" OnClick="SendPR" MarginBottom="Margins.Medium">自动提交 PR</BSButton>
                <BSButton Color="BSColor.Info" OnClick="SendPRManually">转到 GitHub 提交 PR</BSButton>
            </BSRow>
        </BSContainer>


        @if (prlink != null)
        {
            <BSAlert Color="BSColor.Info" HasIcon="true">
                PR 提交完成，前往这里查看你的 PR： <BSAlertLink Url="@prlink">@prlink</BSAlertLink>
                <br/>
                如果你是第一次提交 PR，你需要在 PR 页面签署 CLA 协议。<br/>
                你可以根据 CFPABot 的提示来看看有没有什么可以修改的地方。<br/>
                <strong>请在几天内查看 PR 的更新（邮件会发送），及时修改审核者要求修改的内容，以免被拒收。</strong>
                <BSAlert HasIcon="true" Color="BSColor.Warning">请不要提交后就不管你提交的 PR，很可能会被拒收！</BSAlert>
            </BSAlert>
        }
        
        

        @code{
            string prlink = null;
            string prBody = "作者已阅读贡献指南并同意 CC 协议。\n\n由 CFPA-Helper 提交。";
            async Task SendPR()
            {
                var pr = await prCreatorModule.CreatePR(prBody);
                prlink = pr.HtmlUrl;
            }

            void SendPRManually()
            {
                _navigationManager.NavigateTo($"https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/compare/main...{prCreatorModule.repo.Owner.Login}:{prCreatorModule.repo.Name}:{prCreatorModule.branchName}?expand=1");
            }
        }
    }
</BSCard>
</BSCard>

@if (step == 5)
{
    <BSImage style="width: 800px;" Source="/Azusa/img/tip1.png"></BSImage>
}

@code
{
    string modName { get; set; } = "未知";
    string modDomain { get; set; } = "未知";
    bool netModDomainAcquired = false;
    bool netModDomainError = false;
    string prTitle { get; set; } = "未知";
    string finalLogger { get; set; } = "开始提交进程...";

    FileCache cnCache;
    async Task OnFileChangeCn(InputFileChangeEventArgs arg)
    {
        if (arg.GetMultipleFiles().Count == 0) return;

        if (arg.File.Size > 1024 * 1024 * 50)
        {
            ShowToast("文件大小过大.");
            return;
        }
        if (arg.File.Name != "zh_cn.lang" && arg.File.Name != "zh_cn.json")
        {
            ShowToast("文件名有误.");
            return;
        }
        cnCache = await FileCache.CreateFrom(arg.File.Name, arg.File.OpenReadStream(1024 * 1024 * 50));
    }

    FileCache enCache;
    async Task OnFileChangeEn(InputFileChangeEventArgs arg)
    {
        if (arg.GetMultipleFiles().Count == 0) return;
        if (arg.File.Size > 1024 * 1024 * 50)
        {
            ShowToast("文件大小过大.");
            return;
        }
        if (arg.File.Name != "en_us.lang" && arg.File.Name != "en_us.json")
        {
            ShowToast("文件名有误.");
            return;
        }
        enCache = await FileCache.CreateFrom(arg.File.Name, arg.File.OpenReadStream(1024 * 1024 * 50));
    }

    public void Dispose()
    {
        cnCache?.Dispose();
        enCache?.Dispose();

    }
}


@code
{
    public class FileCache : IDisposable
    {
        public string FilePath { get; private set; }
        public string FileName { get; private set; }

        public static async Task<FileCache> CreateFrom(string name, Stream stream)
        {
            var a = new FileCache();
            a.FilePath = Path.GetTempFileName();
            await using var fs = File.OpenWrite(a.FilePath);
            await stream.CopyToAsync(fs);
            a.FileName = name;
            return a;
        }

        public void Dispose()
        {
            try
            {
                if (File.Exists(FilePath))
                {
                    File.Delete(FilePath);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

        }
    }

}
