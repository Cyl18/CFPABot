@page "/prcreator"
@using System.IO
@using CFPABot.Exceptions
@using CFPABot.Utils
@using CurseForge.APIClient.Models.Mods
@using GammaLibrary.Extensions
@using Microsoft.AspNetCore.Http
@implements IDisposable
@inject IBlazorStrap _blazorStrap
@inject IHttpContextAccessor _http
@inject NavigationManager _navigationManager
<PageTitle>模组翻译快捷上传</PageTitle>
<BSToaster />
<h1>模组翻译快捷上传</h1>

@if (LoginManager.GetLoginStatus(_http))
{
    @code{
        string userName = null;

        string GetName()
        {
            if (userName == null) userName = (LoginManager.GetGitHubClient(_http).User.Current().Result).Login;
            
            return userName;
        }
    }
    <BSLabel MarginBottom="Margins.Medium">登录账号: @(GetName())</BSLabel>
}
else
{
    <BSAlert Color="BSColor.Danger" HasIcon="true" MarginBottom="Margins.Medium">你还没有登录. 下面的操作都是无效的.</BSAlert>
    <BSButton MarginBottom="Margins.Medium" Color="BSColor.Primary" OnClick="() => _navigationManager.NavigateTo(LoginManager.LoginUrl)">登录</BSButton>
}
@code
{
    void ShowToast(string text)
    {
        _blazorStrap.Toaster.Add("警告", text, o =>
        {
            o.Color = BSColor.Warning;
            o.HasIcon = true;
            o.Toast = Toast.TopRight;
        });
    }

}

@code {
    int step = 0;

}

@if (step == 0)
{
    <BSCard CardType="CardType.Card" style="width: 60rem;">
        <BSCard CardType="CardType.Body">
            <BSLabel Size="Size.Large" MarginBottom="Margins.Medium">上传文件</BSLabel>


            <BSContainer MarginBottom="Margins.Medium">
                <div Class="@BS.Form_Check">
                    <BSInputRadio CheckedValue="@(UploadMode.Lang)" @bind-Value="_uploadMode" />
                    <BSLabel IsCheckLabel="true">中英文文件上传</BSLabel>
                </div>

                <div Class="@BS.Form_Check">
                    <BSInputRadio CheckedValue="@(UploadMode.Zip)" @bind-Value="_uploadMode" />
                    <BSLabel IsCheckLabel="true">压缩包上传</BSLabel>
                </div>
            </BSContainer>

            @code {

        enum UploadMode
        {
            Lang,
            Zip,
        }

        private UploadMode _uploadMode { get; set; } = UploadMode.Lang;
        }

        @if (_uploadMode == UploadMode.Lang)
            {
                <BSContainer>
                    <BSRow MarginBottom="Margins.Small">
                        <BSCol Column="3" Class="border">
                            <BSLabel Margin="Margins.Auto">中文语言文件 (zh_cn.json/zh_cn.lang)</BSLabel>
                        </BSCol>
                        <BSCol Column="6" Class="border">
                            <BSInputFile Margin="Margins.Auto" ValidWhen="() => true" OnChange="OnFileChangeCn" />
                        </BSCol>
                    </BSRow>
                    <BSRow>
                        <BSCol Column="3" Class="border">
                            <BSLabel Margin="Margins.Auto">英文语言文件 (en_us.json/en_us.lang)</BSLabel>
                        </BSCol>
                        <BSCol Column="6" Class="border">
                            <BSInputFile Margin="Margins.Auto" ValidWhen="() => true" OnChange="OnFileChangeEn" />
                        </BSCol>
                    </BSRow>
                </BSContainer>
                <BSButton Color="BSColor.Success" OnClick="ContinueWithLang">继续</BSButton>
                @code {

        void ContinueWithLang()
        {
            if (cnCache == null || enCache == null)
            {
            ShowToast("文件没有上传完成");
            return;
            }
            step++;
        }

        }
            }
        </BSCard>
    </BSCard>
}


@if (step == 1)
{
    <BSCard CardType="CardType.Card" style="width: 60rem;">
        <BSCard CardType="CardType.Body">
            <BSLabel Size="Size.Large" MarginBottom="Margins.Small">Yum</BSLabel>
            <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">
                <span class="@BS.Input_Group_Text">Minecraft 版本</span>
                <BSInput InputType="InputType.Select" InputSize="Size.Large" MarginBottom="Margins.Medium" @bind-Value="imcVersion">
                    @foreach (var x in mcVersions)
                    {
                        <option value="@x">@x</option>
                    }
                </BSInput>
            </BSInputGroup>

            <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">
                <span class="@BS.Input_Group_Text">CurseForge 项目名或链接</span>
                <BSInput TValue="string" InputType="InputType.Text" OnValueChange="(x) => curseForgeSlug = x" />
            </BSInputGroup>
            <BSAlert Color="BSColor.Info" HasIcon="true" MarginBottom="Margins.Medium">
                例如： <code>https://www.curseforge.com/minecraft/mc-mods/applied-energistics-2</code> 或 <code>applied-energistics-2</code>
            </BSAlert>
            <BSButton Color="BSColor.Success" OnClick="verifySlug">验证</BSButton>



            @code
            {
                MCVersion _mcVersion
                {
                    get => imcVersion.FirstOrDefault()?.ToMCVersion() ?? MCVersion.v118;
                }
                string[] imcVersion = new string[0];

                string[] mcVersions = Enum.GetValues<MCVersion>().Select(x => x.ToVersionString()).ToArray();

                string curseForgeSlug = "";
                bool inputProjectID = false;
                Mod mod;
                async Task verifySlug()
                {
                    var formattedSlug = trimmedSlug;
                    try
                    {
                        var addon = await CurseManager.GetAddon(formattedSlug);
                        mod = addon;
                        modName = mod.Name;
                        step++;
                        Task.Run(async () =>
                        {
                            var modID = await CurseManager.GetModID(addon, _mcVersion, true, false);
                            netModDomainAcquired = true;
                            if (modID == "未知")
                            {
                                netModDomainError = true;
                            }
                            else
                            {
                                modDomain = modID;
                            }
                            InvokeAsync(StateHasChanged);
                        });
                    }
                    catch (CheckException e)
                    {
                        inputProjectID = true;
                    }
                    catch (Exception e)
                    {
                        ShowToast("验证失败.");
                        ShowToast(e.Message);
                    }
                }

                string curseProjectID = "";
                string trimmedSlug => curseForgeSlug.Trim().Split('/').Last().ToLower();
            }

                @if (inputProjectID)
                {
                    <BSAlert Color="BSColor.Warning" HasIcon="true" MarginBottom="Margins.Medium">
                        无法找到 CurseForge 项目名到项目 ID 的映射。<br/>
                        请检查此链接能否打开 <BSAlertLink href="@($"https://www.curseforge.com/minecraft/mc-mods/{(trimmedSlug)}")">这里</BSAlertLink>，<br/>
                        并在右侧找到项目 ID 并填写到下面的文本框。如果不能打开，请检查你上方的输入是否正确。
                    </BSAlert>

                    <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">
                        <span class="@BS.Input_Group_Text">CurseForge 项目 ID</span>
                        <BSInput TValue="string" InputType="InputType.Text" bind-Value="@curseProjectID" />
                    </BSInputGroup>

                    <BSButton Color="BSColor.Success" OnClick="checkProjectID">确认项目 ID</BSButton>

                    @code
                    {
                        async Task checkProjectID()
                        {
                            try
                            {
                                var i = curseProjectID.ToInt();
                                var s = await CurseManager.GetAddon(i);
                                if (s.Slug == trimmedSlug)
                                {
                                    ModIDMappingMetadata.Instance.Mapping[trimmedSlug] = (int)i;
                                    ModIDMappingMetadata.Save();
                                    inputProjectID = false;
                                    ShowToast("验证成功.");
                                }
                                else
                                {
                                    ShowToast("验证失败.");
                                }
                            }
                            catch (Exception e)
                            {
                                ShowToast("验证失败.");
                                ShowToast(e.Message);
                            }
                        }
                    }
                }

        </BSCard>
    </BSCard>
}

@if (step == 2)
{
    <BSCard CardType="CardType.Card" style="width: 60rem;">
    <BSCard CardType="CardType.Body">
    @if (!netModDomainAcquired)
    {
        <BSLabel>请稍等...</BSLabel>
    }
    else
    {
        <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">
            <span class="@BS.Input_Group_Text">Mod Domain</span>
            <BSInput TValue="string" InputType="InputType.Text" bind-Value="@modDomain"/> 
        </BSInputGroup>
        @if (netModDomainError)
        {
            <BSAlert Color="BSColor.Warning" HasIcon="true" MarginBottom="Margins.Medium">
                无法自动获取 Mod Domain。请手动填写并保证其正确性。
                Mod Domain 的获取方法：使用解压软件打开模组，打开 assets 文件夹，找到内部有你正在翻译文件的 lang 文件夹，例如 <code>assets/jei/lang/</code> ,<code>jei</code>便是此模组的 Momain。
            </BSAlert>
        }
        else
        {
            <BSAlert Color="BSColor.Info" HasIcon="true" MarginBottom="Margins.Medium">
                自动找到了模组的 Domain，请检查是否正确。
                Mod Domain 的获取方法：使用解压软件打开模组，打开 assets 文件夹，找到内部有你正在翻译文件的 lang 文件夹，例如 <code>assets/jei/lang/</code> ,<code>jei</code>便是此模组的 Momain。
            </BSAlert>
        }
        <BSButton Color="BSColor.Success" OnClick="FinishModDomain">下一步</BSButton>
        @code{

            async Task FinishModDomain()
            {
                if (!modDomain.ToCharArray().All(x => char.IsDigit(x) || char.IsLower(x) || x is '_' or '-' or '.'))
                {
                    ShowToast("Mod Domain 验证失败。请检查是否有大写字母和空格。");
                }
                else
                {
                    emails = await LoginManager.GetEmails(_http);
                    step++;
                    prTitle = $"{modName} 翻译提交";
                }
            }

        }
    }
    </BSCard>
    </BSCard>
}
@if (step == 3)
{
    <BSCard CardType="CardType.Card" style="width: 60rem;">
    <BSCard CardType="CardType.Body">
        <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">
            <span class="@BS.Input_Group_Text">PR 标题</span>
            <BSInput TValue="string" InputType="InputType.Text" bind-Value="@prTitle" />
        </BSInputGroup>
        
        <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">
            <span class="@BS.Input_Group_Text">你的邮箱</span>
            <BSInput InputType="InputType.Select" InputSize="Size.Large" MarginBottom="Margins.Medium" @bind-Value="iemail">
                @foreach (var x in emails)
                {
                    <option value="@x">@x</option>
                }
            </BSInput>
        </BSInputGroup>
        

        <BSButton Color="BSColor.Success" OnClick="Submit">提交</BSButton>

        @code{

            string[] emails = new string[0];
            string[] iemail = new string[0];
            string email => iemail.First();
            void Submit()
            {
                if (iemail.Length == 0)
                {
                    ShowToast("没有选择邮箱");
                    return;
                }
                step++;
                Task.Run(async () =>
                {
                    try
                    {
                        _http.HttpContext.Request.Cookies.TryGetValue("oauth-token", out var token);
                        await new PRCreatorModule(LoginManager.GetGitHubClient(_http), enCache, cnCache, email, trimmedSlug, _mcVersion.ToVersionString(), prTitle, s =>
                        {
                            finalLogger += "\n";
                            finalLogger += s;
                            InvokeAsync(StateHasChanged);
                        }, token, modDomain).Run();
                    }
                    catch (Exception e)
                    {
                        finalLogger += "发生错误: \n";
                        finalLogger += e.Message;
                        InvokeAsync(StateHasChanged);
                    }
                });
            }
        }
    </BSCard>
    </BSCard>
}

<BSCard CardType="CardType.Card" style="width: 32rem;">
<BSCard CardType="CardType.Body">
    <BSCol>
        模组名: @modName <br/>
        游戏版本: @_mcVersion.ToVersionString() <br/>
        模组 Slug: @trimmedSlug <br/>
        模组 Domain: @modDomain <br/>
        PR Title: @prTitle <br/>
    </BSCol>
    @if (step == 4)
    {
        <BSLabel>
            @finalLogger
        </BSLabel>
    }
</BSCard>
</BSCard>

@code
{
    string modName = "未知";
    string modDomain = "未知";
    bool netModDomainAcquired = false;
    bool netModDomainError = false;
    string prTitle = "未知";
    string finalLogger = "开始提交进程...";

    FileCache cnCache;
    async Task OnFileChangeCn(InputFileChangeEventArgs arg)
    {
        if (arg.GetMultipleFiles().Count == 0) return;

        if (arg.File.Size > 1024 * 1024 * 50)
        {
            ShowToast("文件大小过大.");
            return;
        }
        if (arg.File.Name != "zh_cn.lang" && arg.File.Name != "zh_cn.json")
        {
            ShowToast("文件名有误.");
            return;
        }
        cnCache = await FileCache.CreateFrom(arg.File.Name, arg.File.OpenReadStream(1024 * 1024 * 50));
    }

    FileCache enCache;
    async Task OnFileChangeEn(InputFileChangeEventArgs arg)
    {
        if (arg.GetMultipleFiles().Count == 0) return;
        if (arg.File.Size > 1024 * 1024 * 50)
        {
            ShowToast("文件大小过大.");
            return;
        }
        if (arg.File.Name != "en_us.lang" && arg.File.Name != "en_us.json")
        {
            ShowToast("文件名有误.");
            return;
        }
        enCache = await FileCache.CreateFrom(arg.File.Name, arg.File.OpenReadStream(1024 * 1024 * 50));
    }

    public void Dispose()
    {
        cnCache?.Dispose();
        enCache?.Dispose();

    }
}


@code
{
    public class FileCache : IDisposable
    {
        public string FilePath { get; private set; }
        public string FileName { get; private set; }

        public static async Task<FileCache> CreateFrom(string name, Stream stream)
        {
            var a = new FileCache();
            a.FilePath = Path.GetTempFileName();
            await using var fs = File.OpenWrite(a.FilePath);
            await stream.CopyToAsync(fs);
            a.FileName = name;
            return a;
        }

        public void Dispose()
        {
            try
            {
                if (File.Exists(FilePath))
                {
                    File.Delete(FilePath);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

        }
    }

}
