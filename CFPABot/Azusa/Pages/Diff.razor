@page "/Diff/{pprid?}/{pcfslug?}"
@using Markdig
@using System.IO
@using System.Text
@using CFPABot.Command
@using CFPABot.DiffEngine
@using CFPABot.Utils
@using GammaLibrary.Extensions
@using Serilog
@inject IBlazorStrap _blazorStrap

<PageTitle>Diff</PageTitle>
<h3>Diff</h3>
<BSToaster />
<BSAlert Color="BSColor.Info" HasIcon="true" MarginBottom="Margins.Medium">Two-Way 对比只需要填写 Diff1-当前 和 Diff2-当前 即可</BSAlert>
@code {

    [Parameter]
    public string? PPrID { get; set; }

    [Parameter]
    public string? PCfSlug { get; set; }

    int prid;
    string slug;
    void ShowToast(string text)
    {
        _blazorStrap.Toaster.Add("警告", text, o =>
        {
            o.Color = BSColor.Warning;
            o.HasIcon = true;
            o.Toast = Toast.TopRight;
        });
    }
}
<BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">

    <span class="@BS.Input_Group_Text">PRID</span>
    <BSInput TValue="int" MarginBottom="Margins.Medium" InputType="InputType.Number" @bind-Value="prid" />

<span class="@BS.Input_Group_Text">Slug</span>
            <BSInput TValue="string" InputType="InputType.Text" @bind-Value="slug" />
    <BSButton Color="BSColor.Info" OnClick="() => RefreshTexts(false)">获取 PR 数据</BSButton>
    <BSButton Color="BSColor.Info" OnClick="() => GetModFiles()">获取模组文件</BSButton>
</BSInputGroup>
@if (!refreshing)
{


    <BSContainer MarginBottom="Margins.Medium">
        <BSCol Column="8" MarginBottom="Margins.Small">
            <BSRow Class="border">
                <BSInputGroup Size="Size.Medium" MarginTop="Margins.Small" MarginBottom="Margins.Medium">
                    <BSLabel class="@BS.Input_Group_Text">Diff1-源（如英文）</BSLabel>
                    <BSInput InputType="InputType.Select" InputSize="Size.Medium" MarginBottom="Margins.Medium" @bind-Value="diff1from">
                        @foreach (var x in indexs)
                        {
                            <option value="@x">@texts[x]</option>
                        }
                    </BSInput>
                </BSInputGroup>
            </BSRow>
            <BSRow Class="border">
                <BSInputGroup Size="Size.Medium" MarginTop="Margins.Small" MarginBottom="Margins.Medium">
                    <BSLabel class="@BS.Input_Group_Text">Diff1-当前（如英文）</BSLabel>
                    <BSInput InputType="InputType.Select" InputSize="Size.Medium" MarginBottom="Margins.Medium" @bind-Value="diff1to">
                        @foreach (var x in indexs)
                        {
                            <option value="@x">@texts[x]</option>
                        }
                    </BSInput>
                </BSInputGroup>
            </BSRow>
        </BSCol>
        <BSCol Column="8">
            <BSRow Class="border">
                <BSInputGroup Size="Size.Medium" MarginTop="Margins.Small" MarginBottom="Margins.Medium">
                    <BSLabel class="@BS.Input_Group_Text">Diff2-源（如英文）</BSLabel>
                    <BSInput InputType="InputType.Select" InputSize="Size.Medium" MarginBottom="Margins.Medium" @bind-Value="diff2from">
                        @foreach (var x in indexs)
                        {
                            <option value="@x">@texts[x]</option>
                        }
                    </BSInput>
                </BSInputGroup>
            </BSRow>
            <BSRow Class="border">
                <BSInputGroup Size="Size.Medium" MarginTop="Margins.Small" MarginBottom="Margins.Medium">
                    <BSLabel class="@BS.Input_Group_Text">Diff2-当前（如英文）</BSLabel>
                    <BSInput InputType="InputType.Select" InputSize="Size.Medium" MarginBottom="Margins.Medium" @bind-Value="diff2to">
                        @foreach (var x in indexs)
                        {
                            <option value="@x">@texts[x]</option>
                        }
                    </BSInput>
                </BSInputGroup>
            </BSRow>

        </BSCol>
    </BSContainer>

    <BSButton MarginBottom="Margins.Medium" MarginTop="Margins.Medium" Color="BSColor.Info" OnClick="RunDiff">Diff！</BSButton>

@if (markdownHtml != null)
{
    @((MarkupString)(Markdown.ToHtml(markdownHtml,
        new MarkdownPipelineBuilder().UsePipeTables().UseBootstrap().UseGridTables().Build())))

}
}
@if(refreshing){
<BSAlert HasIcon="true" Color="BSColor.Info">刷新中..</BSAlert>
}



@code {
    string markdownHtml = null;
    public string[] texts = new string[0];
    public int[] indexs = new int[0];
    public LangFileWrapper[] langFiles = new LangFileWrapper[0];
    public int diff1from;
    public int diff1to;  
    public int diff2from;
    public int diff2to;
    bool refreshing = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshTexts(true);

        refreshing = false;

        slug = PCfSlug;
        prid = PPrID.IsInt() ? PPrID.ToInt() : 0;
        InvokeAsync(StateHasChanged);
        var list = texts.ToList();
        if (PPrID.IsInt())
        {
            diff1from = Find("主库的 en 文件");
            diff1to = Find("PR 的 en 文件");
            diff2from = Find("主库的 cn 文件");
            diff2to = Find("PR 的 cn 文件");
        }
        InvokeAsync(StateHasChanged);

        int Find(string s)
        {
            var index = list.FindIndex(x => x.Contains(s));
            return index == -1 ? 0 : index;
        }

    }

    private async Task RefreshTexts(bool firstTime)
    {
        refreshing = true;
        var textsV = texts.ToList();
        if (firstTime)
        {
            textsV.Add("空白");
        }
        var langV = langFiles.ToList();
        if (firstTime)
        {
            langV.Add(LangFileWrapper.FromLangFile(LangFile.Empty));
        }
        if (firstTime && PPrID.IsInt() && !PCfSlug.IsNullOrWhiteSpace())
        {
            await AddPr(PPrID.ToInt(), PCfSlug, textsV, langV);
        }
        if (prid != 0 && slug.NotNullNorWhiteSpace())
        {
            await AddPr(prid, slug, textsV, langV);
            
        }
        
        indexs = Enumerable.Range(0, textsV.Count).ToArray();
        texts = textsV.ToArray();
        langFiles = langV.ToArray();
        refreshing = false;
        InvokeAsync(StateHasChanged);
    }

    ModPath path;

    private async Task AddPr(int pr, string pCfSlug, List<string> textsV, List<LangFileWrapper> langV)
    {
        try
        {
            var langs = await LangFileFetcher.FromPR(pr, new List<Exception>());
            var langFilePairs = langs.Where(x => x.ModPath.CurseForgeSlug == pCfSlug);
            foreach (var (fromEnFile, toEnFile, fromCnFile, toCnFile, modPath) in langFilePairs)
            {
                if (fromEnFile != null)
                {
                    var s = $"{pCfSlug} {modPath.ModVersion} 主库的 en 文件";
                    if (!texts.Contains(s))
                    {
                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromLangFile(fromEnFile));

                    }
                }

                if (fromCnFile != null)
                {
                    var s = $"{pCfSlug} {modPath.ModVersion} 主库的 cn 文件";
                    if (!texts.Contains(s))
                    {
                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromLangFile(fromCnFile));
                    }
                }

                if (toEnFile != null)
                {
                    var s = $"#{pr} {pCfSlug} {modPath.ModVersion} PR 的 en 文件";
                    if (!texts.Contains(s))
                    {
                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromLangFile(toEnFile));
                    }
                }

                if (toCnFile != null)
                {
                    var s = $"#{pr} {pCfSlug} {modPath.ModVersion} PR 的 cn 文件";
                    if (!texts.Contains(s))
                    {
                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromLangFile(toCnFile));
                    }
                }

                path = modPath;
            }
        }
        catch (Exception e)
        {
            ShowToast(e.Message);
            Log.Error(e, "Differ");
        }
    }

    private async Task RunDiff()
    {
        try
        {

            var sb = new StringBuilder();
            var list = new[] { new LangFilePair(await langFiles[diff1from].Get(), await langFiles[diff1to].Get(), await langFiles[diff2from].Get(), await langFiles[diff2to].Get(), path)};
                        void AddLine(string sourceEn, string currentEn, StringBuilder stringBuilder, string sourceCn, string currentCn)
                        {
                            if (sourceEn.IsNullOrWhiteSpace())
                            {
                                if (currentEn.IsNullOrWhiteSpace())
                                {
                                    stringBuilder.Append("⛔");
                                }
                                else
                                {
                                    stringBuilder.Append($"{currentEn}");
                                }
                            }
                            else
                            {
                                if (sourceEn.Trim() == currentEn.Trim())
                                {
                                    stringBuilder.Append($"{currentEn}");
                                }
                                else
                                {
                                    stringBuilder.Append($"{sourceEn}<br>🔽<br>{currentEn}");
                                }
                            }

                            stringBuilder.Append(" | ");

                            if (sourceCn.IsNullOrWhiteSpace())
                            {
                                if (currentCn.IsNullOrWhiteSpace())
                                {
                                    stringBuilder.Append("⛔");
                                }
                                else
                                {
                                    stringBuilder.Append($"{currentCn}");
                                }
                            }
                            else
                            {
                                stringBuilder.Append($"{sourceCn}<br>🔽<br>{currentCn}");
                            }
                        }

                        foreach (var o in list)
                        {
                            var diffLines = LangDiffer.Run(o);
                            var lines = o.ToCNFile.OriginalFile.Split('\n');

                            sb.AppendLine($"<details><summary>{o.ModPath}</summary>\n");
                            sb.AppendLine("| 行号 | 英文 | 中文 |");
                            sb.AppendLine("| :-: | ----: | :-------------- |");
                            foreach (var (key, sourceEn, currentEn, sourceCn, currentCn) in diffLines)
                            {
                                if (sourceCn == currentCn || currentEn.IsNullOrWhiteSpace() && currentCn.IsNullOrWhiteSpace()) continue;
                                sb.Append("| ");
                                sb.Append($"{1 + lines.ToList().FindIndex(x => x.Contains(key) && x.Contains(currentCn))} | ");
                                AddLine(sourceEn, currentEn, sb, sourceCn, currentCn);

                                sb.AppendLine(" |");
                            }
                            sb.AppendLine("\n</details>\n\n");


                            sb.AppendLine($"<details><summary>{o.ModPath}-keys</summary>\n");
                            sb.AppendLine("| Key | 英文 | 中文 |");
                            sb.AppendLine("| - | --: | :------------- |");
                            foreach (var (key, sourceEn, currentEn, sourceCn, currentCn) in diffLines)
                            {
                                if (sourceCn == currentCn || currentEn.IsNullOrWhiteSpace() && currentCn.IsNullOrWhiteSpace()) continue;
                                
                                sb.Append("| ");
                                sb.Append($" `{key}` |");
                                AddLine(sourceEn, currentEn, sb, sourceCn, currentCn);

                                sb.AppendLine(" |");
                            }
                            sb.AppendLine("\n</details>\n");


                            sb.AppendLine($"<details><summary>{o.ModPath}-术语检查</summary>\n");
                            sb.AppendLine("| Key | 英文 | 中文 | 检查结果 |");
                            sb.AppendLine("| - | --: | :------------- | - |");
                            foreach (var (key, sourceEn, currentEn, sourceCn, currentCn) in diffLines)
                            {
                                if (sourceCn == currentCn || currentEn.IsNullOrWhiteSpace() && currentCn.IsNullOrWhiteSpace()) continue;

                                string termTextResult = "中文或英文为空";
                                var termResult = currentEn != null && currentCn != null && CommandProcessor.CheckTerms(currentEn.ToLower(), currentCn.ToLower(), out termTextResult);
                                if (!termResult) continue;
                                
                                sb.Append("| ");
                                sb.Append($" `{key}` |");
                                AddLine(sourceEn, currentEn, sb, sourceCn, currentCn);
                                sb.Append($" | {termTextResult.Replace("\n", "<br>")} | ");
                                sb.AppendLine(" |");
                            }
                            sb.AppendLine("\n</details>\n");

                        }

            markdownHtml = sb.ToString();

        }
        catch (Exception e)
        {
            ShowToast(e.Message);
            Log.Error(e, "Differ");
        }
    }

    private async Task GetModFiles()
    {
        refreshing = true;
        try
        {
            var allModFiles = await CurseManager.GetAllModFiles(await CurseManager.GetAddon(slug));
            
        }
        catch (Exception e)
        {
            ShowToast(e.Message);
            Log.Error(e, "UI get all mod files");
        }
        finally
        {
            refreshing = false;
            InvokeAsync(StateHasChanged);
        }
        
    }

}