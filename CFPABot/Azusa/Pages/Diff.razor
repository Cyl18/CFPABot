@page "/Diff/{pprid?}/{pcfslug?}"
@using Markdig
@using System.IO
@using System.Text
@using CFPABot.Command
@using CFPABot.DiffEngine
@using CFPABot.Utils
@using GammaLibrary.Extensions
@using Ganss.Xss
@using Serilog
@using System.Globalization
@using System.Net
@using Csv
@using Markdig.Extensions.Tables
@inject IBlazorStrap _blazorStrap
@inject NavigationManager _navigationManager

<PageTitle>Diff</PageTitle>
<h3>Diff</h3>
<BSToaster/>
@if (PPrID.IsNullOrWhiteSpace())
{
    <BSAlert Color="BSColor.Info" HasIcon="true" MarginBottom="Margins.Medium">检测到你直接打开了这个页面，建议你打开 PR 内 Bot 提示的"对比"链接，不要手动填写</BSAlert>
}
<BSAlert Color="BSColor.Info" HasIcon="true" MarginBottom="Margins.Medium">Two-Way 对比只需要填写 Diff1-当前 和 Diff2-当前 即可</BSAlert>

@code {

    [Parameter]
    public string? PPrID { get; set; }

    [Parameter]
    public string? PCfSlug { get; set; }

    int prid;
    string slug;

    void ShowToast(string text)
    {
        _blazorStrap.Toaster.Add("警告", text, o =>
        {
            o.Color = BSColor.Warning;
            o.HasIcon = true;
            o.Toast = Toast.TopRight;
        });
    }

}

<BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">

    <span class="@BS.Input_Group_Text">PRID</span>
    <BSInput TValue="int" InputType="InputType.Number" @bind-Value="prid"/>

    <span class="@BS.Input_Group_Text">Slug</span>
    <BSInput TValue="string" InputType="InputType.Text" @bind-Value="slug"/>
    <BSButton Color="BSColor.Info" OnClick="() => RefreshTexts(false)">获取 PR 数据</BSButton>
    <BSButton Color="BSColor.Info" OnClick="() => GetModFiles()">获取模组文件</BSButton>
</BSInputGroup>


@if (!refreshing)
{
    <BSContainer>
            <BSRow>
                <BSCol Align="Align.Start">
                    <BSCard Class="fade-in" CardType="CardType.Card" MarginTop="Margins.Medium" MarginBottom="Margins.Medium" style="width: 24rem;">
                        <BSCard CardType="CardType.Body">
                            <BSLabel MarginBottom="Margins.Medium">添加主库中的游戏版本</BSLabel>
                            <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Small">
                                <span class="@BS.Input_Group_Text">Minecraft 版本</span>
                                <BSInput InputType="InputType.Select" InputSize="Size.Medium" MarginBottom="Margins.Medium" @bind-Value="imcVersion">
                                    <option value=" " disabled>选择版本</option>
                                    @foreach (var x in mcVersions)
                                    {
                                        <option value="@x">@x</option>
                                    }
                                </BSInput>
                            </BSInputGroup>
                            <BSButton Color="BSColor.Info" OnClick="() => AddVersion()">添加版本</BSButton>
        
                        </BSCard>
                    </BSCard>
        
                </BSCol>
                <BSCol Align="Align.Start">
                    <BSCard Class="fade-in" CardType="CardType.Card" MarginTop="Margins.Medium" MarginBottom="Margins.Medium" style="width: 12rem;">
                        <BSCard CardType="CardType.Body">
                            <BSLabel MarginBottom="Margins.Medium">导出 CSV 相关</BSLabel>
                            <div Class="@BS.Form_Check" MarginBottom="Margins.Small">
                                <BSInputCheckbox CheckedValue="true" id="c1" @bind-Value="ACDedup"/>
                                <BSLabel for="c1" IsCheckLabel="true">A-C 去重</BSLabel>
                            </div>
                            <div Class="@BS.Form_Check" MarginBottom="Margins.Small">
                                <BSInputCheckbox CheckedValue="true" id="c2" @bind-Value="BDDedup"/>
                                <BSLabel for="c2" IsCheckLabel="true">B-D 去重</BSLabel>
                            </div>
                            <div Class="@BS.Form_Check" MarginBottom="Margins.Small">
                                <BSInputCheckbox CheckedValue="true" id="c3" @bind-Value="CDDedup"/>
                                <BSLabel for="c3" IsCheckLabel="true">C-D 去重</BSLabel>
                            </div>
                            <BSButton Color="BSColor.Info" OnClick="() => DownloadCsv()">下载 csv</BSButton>
                        </BSCard>
                    </BSCard>
                </BSCol>
                <BSCol Align="Align.Start">
                    <BSCard Class="fade-in" CardType="CardType.Card" MarginTop="Margins.Medium" MarginBottom="Margins.Medium" style="width: 24rem;">
                        <BSCard CardType="CardType.Body">
                            <BSLabel MarginBottom="Margins.Medium">添加小语种</BSLabel>
                            <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Small">
                                <span class="@BS.Input_Group_Text">小语种文件路径</span>
                                <BSInput TValue="string" InputType="InputType.Text" @bind-Value="languageFilePath"/>
                                <BSLabel>提示: 直接在 GitHub 复制, 以 projects 开头</BSLabel>
                            </BSInputGroup>
                            <BSButton Color="BSColor.Info" OnClick="() => AddLanguage()">确认</BSButton>
                        </BSCard>
                    </BSCard>
                </BSCol>
            </BSRow>
    </BSContainer>

    <BSContainer MarginBottom="Margins.Medium">
        <BSCol Column="8" MarginBottom="Margins.Small">
            <BSRow Class="border">
                <BSInputGroup Size="Size.Medium" MarginTop="Margins.Small" MarginBottom="Margins.Medium">
                    <BSLabel class="@BS.Input_Group_Text" Size="Size.Medium">Diff1-源（如英文）-A</BSLabel>
                    <BSInput InputType="InputType.Select" InputSize="Size.Medium" @bind-Value="diff1from">
                        @foreach (var x in indexes)
                        {
                            <option value="@x">@texts[x]</option>
                        }
                    </BSInput>
                </BSInputGroup>
            </BSRow>
            <BSRow Class="border">
                <BSInputGroup Size="Size.Medium" MarginTop="Margins.Small" MarginBottom="Margins.Medium">
                    <BSLabel class="@BS.Input_Group_Text" Size="Size.Medium">Diff1-当前（如英文）-B</BSLabel>
                    <BSInput InputType="InputType.Select" InputSize="Size.Medium" @bind-Value="diff1to">
                        @foreach (var x in indexes)
                        {
                            <option value="@x">@texts[x]</option>
                        }
                    </BSInput>
                </BSInputGroup>
            </BSRow>
        </BSCol>
        <BSCol Column="8">
            <BSRow Class="border">
                <BSInputGroup Size="Size.Medium" MarginTop="Margins.Small" MarginBottom="Margins.Medium">
                    <BSLabel class="@BS.Input_Group_Text" Size="Size.Medium">Diff2-源（如中文）-C</BSLabel>
                    <BSInput InputType="InputType.Select" InputSize="Size.Medium" @bind-Value="diff2from">
                        @foreach (var x in indexes)
                        {
                            <option value="@x">@texts[x]</option>
                        }
                    </BSInput>
                </BSInputGroup>
            </BSRow>
            <BSRow Class="border">
                <BSInputGroup Size="Size.Medium" MarginTop="Margins.Small" MarginBottom="Margins.Medium">
                    <BSLabel class="@BS.Input_Group_Text" Size="Size.Medium">Diff2-当前（如中文）-D</BSLabel>
                    <BSInput InputType="InputType.Select" InputSize="Size.Medium" @bind-Value="diff2to">
                        @foreach (var x in indexes)
                        {
                            <option value="@x">@texts[x]</option>
                        }
                    </BSInput>
                </BSInputGroup>
            </BSRow>

        </BSCol>
    </BSContainer>

    <BSButton MarginBottom="Margins.Medium" MarginTop="Margins.Medium" Color="BSColor.Primary" OnClick="RunDiff">执行 Diff！</BSButton>
    <BSButton MarginBottom="Margins.Medium" MarginTop="Margins.Medium" Color="BSColor.Info" OnClick="DownloadDiff">下载 Diff</BSButton>

@if (markdownHtml != null)
{
    @((MarkupString) (Markdown.ToHtml(markdownHtml,
        new MarkdownPipelineBuilder().UsePipeTables(new PipeTableOptions()).UseBootstrap().UseGridTables().Build())))
}
}
@if (refreshing)
{
    <BSAlert HasIcon="true" Color="BSColor.Info">刷新中..</BSAlert>
}



@code {
    string markdownHtml = null;
    public string[] texts = new string[0];
    public int[] indexes = new int[0];
    public LangFileWrapper[] langFiles = new LangFileWrapper[0];
    HashSet<ModVersion> versions = new();
    public int diff1from;
    public int diff1to;
    public int diff2from;
    public int diff2to;
    bool refreshing = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshTexts(true);

        refreshing = false;

        slug = PCfSlug;
        prid = PPrID.IsInt() ? PPrID.ToInt() : 0;
        InvokeAsync(StateHasChanged);
        var list = texts.ToList();
        if (PPrID.IsInt())
        {
            diff1from = Find("主库的 en 文件");
            diff1to = Find("PR 的 en 文件");
            diff2from = Find("主库的 cn 文件");
            diff2to = Find("PR 的 cn 文件");
        }
        InvokeAsync(StateHasChanged);

        int Find(string s)
        {
            var index = list.FindIndex(x => x.Contains(s));
            return index == -1 ? 0 : index;
        }
    }

    private async Task RefreshTexts(bool firstTime)
    {
        refreshing = true;
        var textsV = texts.ToList();
        var langV = langFiles.ToList();
        if (firstTime)
        {
            textsV.Add("空白");
        }
        if (firstTime)
        {
            langV.Add(LangFileWrapper.FromLangFile(LangFile.Empty));
        }
        if (firstTime && PPrID.IsInt() && !PCfSlug.IsNullOrWhiteSpace())
        {
            await AddPr(PPrID.ToInt(), PCfSlug, textsV, langV);
        }
        if (prid != 0 && slug.NotNullNorWhiteSpace())
        {
            await AddPr(prid, slug, textsV, langV);
        }

        indexes = Enumerable.Range(0, textsV.Count).ToArray();
        texts = textsV.ToArray();
        langFiles = langV.ToArray();
        refreshing = false;
        InvokeAsync(StateHasChanged);
    }

    ModPath path;

    /// <summary>小语种文件名</summary>
    string languageFilePath { get; set; } = "";

    
    static HttpClient hc = new HttpClient();
    static async Task<bool> LinkExists(string link)
    {
        try
        {
            var message = await hc.SendAsync(new HttpRequestMessage(HttpMethod.Head, link));
            message.EnsureSuccessStatusCode();
            return true;
        }
        catch (HttpRequestException e)
        {
            if (e.StatusCode != HttpStatusCode.NotFound)
                Log.Warning($"LinkExists returned an unusual status code: {e.StatusCode}");
            return false;
        }
    }
    async void AddLanguage()
    {
        refreshing = true;
        var pr = await GitHub.GetPullRequest(prid);

        var textsV = texts.ToList();
        var langV = langFiles.ToList();
        
        try
        {
            var from = pr.Base.Sha;
            var to = pr.Head.Sha;
            var url1 = $"https://raw.githubusercontent.com/CFPAOrg/Minecraft-Mod-Language-Package/{from}/{languageFilePath}";
            var url2 = $"https://raw.githubusercontent.com/CFPAOrg/Minecraft-Mod-Language-Package/{to}/{languageFilePath}";
            if (await LinkExists(url1).ConfigureAwait(false))
            {
                var s = $"手动添加的 {languageFilePath.Split('/').Last()} （主库）";
                textsV.Add(s);
                langV.Add(LangFileWrapper.FromContent(await Download.String(url1, true)));
            }
            if (await LinkExists(url2).ConfigureAwait(false))
            {
                var s = $"手动添加的 {languageFilePath.Split('/').Last()} （PR）";
                textsV.Add(s);
                langV.Add(LangFileWrapper.FromContent(await Download.String(url2, true)));
            }
        }
        catch (Exception e)
        {
            ShowToast(e.Message);
            Log.Error(e, "UI get 小语种 language files");
        }
        finally
        {
            indexes = Enumerable.Range(0, textsV.Count).ToArray();
            texts = textsV.ToArray();
            langFiles = langV.ToArray();

            refreshing = false;
            InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task AddPr(int pr, string pCfSlug, List<string> textsV, List<LangFileWrapper> langV)
    {
        try
        {
            var langs = await LangFileFetcher.FromPR(pr, new List<Exception>());
            var langFilePairs = langs.Where(x => x.ModPath.CurseForgeSlug == pCfSlug);
            foreach (var (fromEnFile, toEnFile, fromCnFile, toCnFile, modPath) in langFilePairs)
            {
                versions.Add(modPath.ModVersion);
                if (fromEnFile != null)
                {
                    var s = $"{pCfSlug} {modPath.ModVersion} 主库的 en 文件";
                    if (!texts.Contains(s))
                    {
                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromLangFile(fromEnFile));
                    }
                }

                if (fromCnFile != null)
                {
                    var s = $"{pCfSlug} {modPath.ModVersion} 主库的 cn 文件";
                    if (!texts.Contains(s))
                    {
                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromLangFile(fromCnFile));
                    }
                }

                if (toEnFile != null)
                {
                    var s = $"#{pr} {pCfSlug} {modPath.ModVersion} PR 的 en 文件";
                    if (!texts.Contains(s))
                    {
                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromLangFile(toEnFile));
                    }
                }

                if (toCnFile != null)
                {
                    var s = $"#{pr} {pCfSlug} {modPath.ModVersion} PR 的 cn 文件";
                    if (!texts.Contains(s))
                    {
                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromLangFile(toCnFile));
                    }
                }

                path = modPath;
            }
        }
        catch (Exception e)
        {
            ShowToast(e.Message);
            Log.Error(e, "Differ");
        }
    }

    private async Task RunDiff()
    {
        try
        {
            var html = await GenDiff();
            markdownHtml = html;
        }
        catch (Exception e)
        {
            ShowToast(e.Message);
            Log.Error(e, "Differ");
        }
    }

    async Task<string> GenDiff()
    {
        var sb = new StringBuilder();
        var list = new[]
        {
            new LangFilePair(await langFiles[diff1from].Get(), await langFiles[diff1to].Get(),
                await langFiles[diff2from].Get(), await langFiles[diff2to].Get(), path)
        };

        void AddLine(string sourceEn, string currentEn, StringBuilder stringBuilder, string sourceCn, string currentCn)
        {
            if (sourceEn.IsNullOrWhiteSpace())
            {
                if (currentEn.IsNullOrWhiteSpace())
                {
                    stringBuilder.Append("⛔");
                }
                else
                {
                    stringBuilder.Append($"{currentEn}");
                }
            }
            else
            {
                if (sourceEn.Trim() == currentEn.Trim())
                {
                    stringBuilder.Append($"{currentEn}");
                }
                else
                {
                    stringBuilder.Append($"{sourceEn}<br>🔽<br>{currentEn}");
                }
            }

            stringBuilder.Append(" | ");

            if (sourceCn.IsNullOrWhiteSpace())
            {
                if (currentCn.IsNullOrWhiteSpace())
                {
                    stringBuilder.Append("⛔");
                }
                else
                {
                    stringBuilder.Append($"{currentCn}");
                }
            }
            else
            {
                stringBuilder.Append($"{sourceCn}<br>🔽<br>{currentCn}");
            }
        }

        foreach (var o in list)
        {
            var diffLines = LangDiffer.Run(o);
            var lines = o.ToCNFile.OriginalFile.Split('\n');

            sb.AppendLine($"<details><summary>{o.ModPath}</summary>\n");
            sb.AppendLine("| 行号 | 英文 | 中文 |");
            sb.AppendLine("| :-: | ----: | :-------------- |");
            foreach (var (key, sourceEn, currentEn, sourceCn, currentCn) in diffLines)
            {
                if (sourceCn == currentCn || currentEn.IsNullOrWhiteSpace() && currentCn.IsNullOrWhiteSpace()) continue;
                sb.Append("| ");
                sb.Append($"{1 + lines.ToList().FindIndex(x => x.Contains(key) && x.Contains(currentCn))} | ");
                AddLine(sourceEn, currentEn, sb, sourceCn, currentCn);

                sb.AppendLine(" |");
            }

            sb.AppendLine("\n</details>\n\n");


            sb.AppendLine($"<details><summary>{o.ModPath}-keys</summary>\n");
            sb.AppendLine("| Key | 英文 | 中文 |");
            sb.AppendLine("| - | --: | :------------- |");
            foreach (var (key, sourceEn, currentEn, sourceCn, currentCn) in diffLines)
            {
                if (sourceCn == currentCn || currentEn.IsNullOrWhiteSpace() && currentCn.IsNullOrWhiteSpace()) continue;

                sb.Append("| ");
                sb.Append($" `{key}` |");
                AddLine(sourceEn, currentEn, sb, sourceCn, currentCn);

                sb.AppendLine(" |");
            }

            sb.AppendLine("\n</details>\n");


            sb.AppendLine($"<details><summary>{o.ModPath}-术语检查</summary>\n");
            sb.AppendLine("| Key | 英文 | 中文 | 检查结果 |");
            sb.AppendLine("| - | --: | :------------- | - |");
            foreach (var (key, sourceEn, currentEn, sourceCn, currentCn) in diffLines)
            {
                if (sourceCn == currentCn || currentEn.IsNullOrWhiteSpace() && currentCn.IsNullOrWhiteSpace()) continue;

                string termTextResult = "中文或英文为空";
                var termResult = currentEn != null && currentCn != null &&
                                 CommandProcessor.CheckTerms(currentEn.ToLower(), currentCn.ToLower(), out termTextResult);
                if (!termResult) continue;

                sb.Append("| ");
                sb.Append($" `{key}` |");
                AddLine(sourceEn, currentEn, sb, sourceCn, currentCn);
                sb.Append($" | {termTextResult.Replace("\n", "<br>")} | ");
                sb.AppendLine(" |");
            }

            sb.AppendLine("\n</details>\n");
        }

        var html = sb.ToString();
        return html;
    }

    private async Task GetModFiles()
    {
        refreshing = true;

        var textsV = texts.ToList();
        var langV = langFiles.ToList();

        try
        {
            var addon = await CurseManager.GetAddon(slug);
            foreach (var modVersion in versions)
            {
                var modEnFile = await CurseManager.GetModEnFile(addon, modVersion.ToVersionDirectory().ToMCVersion(), LangType.EN);
                var modCnFile = await CurseManager.GetModEnFile(addon, modVersion.ToVersionDirectory().ToMCVersion(), LangType.CN);

                if (modEnFile.files != null && modEnFile.files.FirstOrDefault() is { } f2)
                {
                    var s = $"{modCnFile.downloadFileName} 的英文语言文件";

                    textsV.Add(s);
                    langV.Add(LangFileWrapper.FromContent(f2));
                }

                if (modCnFile.files != null && modCnFile.files.FirstOrDefault() is {} f)
                {
                    var s = $"{modCnFile.downloadFileName} 的中文语言文件";

                    textsV.Add(s);
                    langV.Add(LangFileWrapper.FromContent(f));
                }
            }
        }
        catch (Exception e)
        {
            ShowToast(e.Message);
            Log.Error(e, "UI get all mod files");
        }
        finally
        {
            indexes = Enumerable.Range(0, textsV.Count).ToArray();
            texts = textsV.ToArray();
            langFiles = langV.ToArray();

            refreshing = false;
            InvokeAsync(StateHasChanged);
        }
    }

    bool ACDedup = false;
    bool BDDedup = false;
    bool CDDedup = false;


    MCVersion? _mcVersion
    {
        get => imcVersion.IsNullOrWhiteSpace() ? MCVersion.v120 : imcVersion.ToMCVersion();
    }

    string imcVersion = " ";

    string[] mcVersions = Enum.GetValues<MCVersion>().Where(x => (int) x <= (int) MCVersion.v120fabric).Select(x => x.ToVersionString()).ToArray();


    async void AddVersion()
    {
        var v = ModVersion.FromGameVersionDirectory(_mcVersion.Value.ToVersionString());
        versions.Add(v);
        refreshing = true;
        var textsV = texts.ToList();
        var langV = langFiles.ToList();
        try
        {
            var (fromEnFile, fromCnFile) = await LangFileFetcher.FromRepo(prid, slug, v);
            if (fromEnFile != null)
            {
                var s = $"{slug} {v.ToVersionDirectory()} 主库的 en 文件";
                if (!texts.Contains(s))
                {
                    textsV.Add(s);
                    langV.Add(LangFileWrapper.FromLangFile(fromEnFile));
                }
            }

            if (fromCnFile != null)
            {
                var s = $"{slug} {v.ToVersionDirectory()} 主库的 cn 文件";
                if (!texts.Contains(s))
                {
                    textsV.Add(s);
                    langV.Add(LangFileWrapper.FromLangFile(fromCnFile));
                }
            }


            indexes = Enumerable.Range(0, textsV.Count).ToArray();
            texts = textsV.ToArray();
            langFiles = langV.ToArray();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        finally
        {
            refreshing = false;
            InvokeAsync(StateHasChanged);
        }
    }

    async Task DownloadCsv()
    {
        var list = new LangFilePair(await langFiles[diff1from].Get(), await langFiles[diff1to].Get(), await langFiles[diff2from].Get(), await langFiles[diff2to].Get(), path);
        var dir = "/app/caches/csv";
        Directory.CreateDirectory(dir);
        var path1 = dir + $"/{prid}.csv";
        var columnNames = new[] {"行号", "Key", texts[diff1from], texts[diff1to], texts[diff2from], texts[diff2to]};
        var l = new List<string[]>();
        using (var writer = new StreamWriter(File.OpenWrite(path1), new UTF8Encoding(true)))
        {
            foreach (var (key, a, b, c, d) in LangDiffer.Run(list))
            {
                var lines = list.ToCNFile.OriginalFile.Split('\n');
                var line = (1 + lines.ToList().FindIndex(x => x.Contains(key) && x.Contains(d)));
                if (ACDedup && a == c) continue;
                if (BDDedup && d == b) continue;
                if (CDDedup && c == d) continue;

                l.Add(new[] {line.ToString(), key ?? "🚫", a ?? "🚫", b ?? "🚫", c ?? "🚫", d ?? "🚫"});
            }

            CsvWriter.Write(writer, columnNames, l);
        }
        _navigationManager.NavigateTo($"https://cfpa.cyan.cafe/api/Utils/GetCsv/{prid}", true);
    }

    async Task DownloadDiff()
    {
        var dir = "/app/caches/csv";
        Directory.CreateDirectory(dir);
        var path1 = dir + $"/{prid}.md";
        File.WriteAllText(path1, await GenDiff(), Encoding.UTF8);
        _navigationManager.NavigateTo($"https://cfpa.cyan.cafe/api/Utils/GetDiff/{prid}", true);
    }

}