@page "/Diff/{pprid?}/{pcfslug?}"
@using Markdig
@using System.IO
@using System.Text
@using CFPABot.Command
@using CFPABot.DiffEngine
@using CFPABot.Utils
@using GammaLibrary.Extensions
@using Ganss.Xss
@using Serilog
@using System.Globalization
@using System.Net
@using System.Reflection
@using ChatGPT.Net
@using ChatGPT.Net.DTO.ChatGPT
@using Csv
@using DiffPatch
@using Markdig.Extensions.Tables
@using Microsoft.AspNetCore.Http
@using Octokit
@inject IBlazorStrap _blazorStrap
@inject NavigationManager _navigationManager
@inject IHttpContextAccessor _http

<PageTitle>Diff</PageTitle>
<h3>Diff</h3>
<BSToaster/>
@if (PPrID.IsNullOrWhiteSpace())
{
    <BSAlert Color="BSColor.Warning" HasIcon="true" MarginBottom="Margins.Medium">检测到你直接打开了这个页面，建议你打开 PR 内 Bot 提示的"对比"链接，不要手动填写</BSAlert>
}
@if (!LoginManager.GetLoginStatus(_http))
{
    <BSAlert Color="BSColor.Danger" HasIcon="true" MarginBottom="Margins.Medium">你还没有登录，无法进行审核操作。非管理员也可以审核。</BSAlert>

}
<BSAlert Color="BSColor.Info" HasIcon="true" MarginBottom="Margins.Medium">Two-Way 对比只需要填写 Diff1-当前 和 Diff2-当前 即可</BSAlert>

@code {

    [Parameter]
    public string? PPrID { get; set; }

    [Parameter]
    public string? PCfSlug { get; set; }

    int prid;
    string slug;

    void ShowToast(string text)
    {
        _blazorStrap.Toaster.Add("警告", text, o =>
        {
            o.Color = BSColor.Warning;
            o.HasIcon = true;
            o.Toast = Toast.TopRight;
        });
    }

}

<BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">

    <span class="@BS.Input_Group_Text">PRID</span>
    <BSInput TValue="int" InputType="InputType.Number" @bind-Value="prid"/>

    <span class="@BS.Input_Group_Text">Slug</span>
    <BSInput TValue="string" InputType="InputType.Text" @bind-Value="slug"/>
    <BSButton Color="BSColor.Info" OnClick="() => RefreshTexts(false)">获取 PR 数据</BSButton>
    <BSButton Color="BSColor.Info" OnClick="() => GetModFiles()">获取模组文件</BSButton>
</BSInputGroup>


@if (!refreshing)
{
    <BSContainer>
            <BSRow>
                <BSCol Align="Align.Start">
                    <BSCard Class="fade-in" CardType="CardType.Card" MarginTop="Margins.Medium" MarginBottom="Margins.Medium" style="width: 24rem;">
                        <BSCard CardType="CardType.Body">
                            <BSLabel MarginBottom="Margins.Medium">添加主库中的游戏版本</BSLabel>
                            <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Small">
                                <span class="@BS.Input_Group_Text">Minecraft 版本</span>
                                <BSInput InputType="InputType.Select" InputSize="Size.Medium" MarginBottom="Margins.Medium" @bind-Value="imcVersion">
                                    <option value=" " disabled>选择版本</option>
                                    @foreach (var x in mcVersions)
                                    {
                                        <option value="@x">@x</option>
                                    }
                                </BSInput>
                            </BSInputGroup>
                            <BSButton Color="BSColor.Info" OnClick="() => AddVersion()">添加版本</BSButton>
        
                        </BSCard>
                    </BSCard>
        
                </BSCol>
                <BSCol Align="Align.Start">
                    <BSCard Class="fade-in" CardType="CardType.Card" MarginTop="Margins.Medium" MarginBottom="Margins.Medium" style="width: 12rem;">
                        <BSCard CardType="CardType.Body">
                            <BSLabel MarginBottom="Margins.Medium">导出 CSV 相关</BSLabel>
                            <div Class="@BS.Form_Check" MarginBottom="Margins.Small">
                                <BSInputCheckbox CheckedValue="true" id="c1" @bind-Value="ACDedup"/>
                                <BSLabel for="c1" IsCheckLabel="true">A-C 去重</BSLabel>
                            </div>
                            <div Class="@BS.Form_Check" MarginBottom="Margins.Small">
                                <BSInputCheckbox CheckedValue="true" id="c2" @bind-Value="BDDedup"/>
                                <BSLabel for="c2" IsCheckLabel="true">B-D 去重</BSLabel>
                            </div>
                            <div Class="@BS.Form_Check" MarginBottom="Margins.Small">
                                <BSInputCheckbox CheckedValue="true" id="c3" @bind-Value="CDDedup"/>
                                <BSLabel for="c3" IsCheckLabel="true">C-D 去重</BSLabel>
                            </div>
                            <BSButton Color="BSColor.Info" OnClick="() => DownloadCsv()">下载 csv</BSButton>
                        </BSCard>
                    </BSCard>
                </BSCol>
                <BSCol Align="Align.Start">
                    <BSCard Class="fade-in" CardType="CardType.Card" MarginTop="Margins.Medium" MarginBottom="Margins.Medium" style="width: 24rem;">
                        <BSCard CardType="CardType.Body">
                            <BSLabel MarginBottom="Margins.Medium">添加小语种</BSLabel>
                            <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Small">
                                <span class="@BS.Input_Group_Text">小语种文件路径</span>
                                <BSInput TValue="string" InputType="InputType.Text" @bind-Value="languageFilePath"/>
                                <BSLabel>提示: 直接在 GitHub 复制, 以 projects 开头</BSLabel>
                            </BSInputGroup>
                            <BSButton Color="BSColor.Info" OnClick="() => AddLanguage()">确认</BSButton>
                        </BSCard>
                    </BSCard>
                </BSCol>
            </BSRow>
    </BSContainer>

    <BSContainer MarginBottom="Margins.Medium">
        <BSCol Column="8" MarginBottom="Margins.Small">
            <BSRow Class="border">
                <BSInputGroup Size="Size.Medium" MarginTop="Margins.Small" MarginBottom="Margins.Medium">
                    <BSLabel class="@BS.Input_Group_Text" Size="Size.Medium">Diff1-源（如英文）-A</BSLabel>
                    <BSInput InputType="InputType.Select" InputSize="Size.Medium" @bind-Value="diff1from">
                        @foreach (var x in indexes)
                        {
                            <option value="@x">@texts[x]</option>
                        }
                    </BSInput>
                </BSInputGroup>
            </BSRow>
            <BSRow Class="border">
                <BSInputGroup Size="Size.Medium" MarginTop="Margins.Small" MarginBottom="Margins.Medium">
                    <BSLabel class="@BS.Input_Group_Text" Size="Size.Medium">Diff1-当前（如英文）-B</BSLabel>
                    <BSInput InputType="InputType.Select" InputSize="Size.Medium" @bind-Value="diff1to">
                        @foreach (var x in indexes)
                        {
                            <option value="@x">@texts[x]</option>
                        }
                    </BSInput>
                </BSInputGroup>
            </BSRow>
        </BSCol>
        <BSCol Column="8">
            <BSRow Class="border">
                <BSInputGroup Size="Size.Medium" MarginTop="Margins.Small" MarginBottom="Margins.Medium">
                    <BSLabel class="@BS.Input_Group_Text" Size="Size.Medium">Diff2-源（如中文）-C</BSLabel>
                    <BSInput InputType="InputType.Select" InputSize="Size.Medium" @bind-Value="diff2from">
                        @foreach (var x in indexes)
                        {
                            <option value="@x">@texts[x]</option>
                        }
                    </BSInput>
                </BSInputGroup>
            </BSRow>
            <BSRow Class="border">
                <BSInputGroup Size="Size.Medium" MarginTop="Margins.Small" MarginBottom="Margins.Medium">
                    <BSLabel class="@BS.Input_Group_Text" Size="Size.Medium">Diff2-当前（如中文）-D</BSLabel>
                    <BSInput InputType="InputType.Select" InputSize="Size.Medium" @bind-Value="diff2to">
                        @foreach (var x in indexes)
                        {
                            <option value="@x">@texts[x]</option>
                        }
                    </BSInput>
                </BSInputGroup>
            </BSRow>

        </BSCol>
    </BSContainer>

    <BSInputGroup Size="Size.Medium" MarginTop="Margins.Small" MarginBottom="Margins.Medium">
        <BSLabel class="@BS.Input_Group_Text" Size="Size.Medium">Prompt</BSLabel>
        <BSInput InputType="InputType.TextArea" InputSize="Size.Large" @bind-Value="prompt">
        </BSInput>
    </BSInputGroup>
    <BSLabel>(==> 代表从旧翻译变动到新翻译，并不是审核内容)</BSLabel>
    <br/>

    <BSButton MarginBottom="Margins.Medium" MarginTop="Margins.Medium" Color="BSColor.Primary" OnClick="() => RunDiff()">运行 Diff</BSButton>
    <BSButton MarginBottom="Margins.Medium" MarginTop="Margins.Medium" Color="BSColor.Primary" OnClick="SubmitOverallReview">提交审核结果</BSButton>
    <BSButton MarginBottom="Margins.Medium" MarginTop="Margins.Medium" Color="BSColor.Info" OnClick="AIReview">ChatGPT 审核</BSButton>


@if (markdownHtml != null)
{
    @((MarkupString) (Markdown.ToHtml(markdownHtml,
        new MarkdownPipelineBuilder().UsePipeTables(new PipeTableOptions()).UseBootstrap().UseGridTables().Build())))
}


    <div Class="@BS.Form_Check" MarginBottom="Margins.Small">
        <BSInputCheckbox CheckedValue="true" UnCheckedValue="false" id="x1" @bind-Value="ShowKey"/>
        <BSLabel for="x1" IsCheckLabel="true">显示 Key</BSLabel>
    </div>
    <div Class="@BS.Form_Check" MarginBottom="Margins.Small">
        <BSInputCheckbox CheckedValue="true" UnCheckedValue="false" id="x2" @bind-Value="ShowTerm"/>
        <BSLabel for="x2" IsCheckLabel="true">显示术语检查</BSLabel>
    </div>


    <BSTable IsResponsive="true" IsStriped="true" Class="table-hover">
        <BSTHead>
            <BSTR>
                <BSTD style="text-align: center; width: 30px;">行号</BSTD>
                @if (ShowKey)
                {
                    <BSTD style="text-align: left;">Key</BSTD>
                }
                <BSTD style="text-align: right;">英文</BSTD>
                <BSTD style="text-align: left;">中文</BSTD>
                @if (ShowTerm)
                {
                    <BSTD style="text-align: center;">术语</BSTD>
                }
                <BSTD style="text-align: left;">按钮</BSTD>
            </BSTR>
        </BSTHead>
        <BSTBody>
            @if (diffs != null)
            {
                @foreach (var x in diffs)
                {
                    <BSTR>
                        <BSTD style="text-align: center;">@x.Line</BSTD>
                        @if (ShowKey)
                        {
                            <BSTD style="text-align: left; white-space: pre-line">@x.Key</BSTD>
                        }
                        <BSTD style="text-align: right; white-space: pre-line">@x.En</BSTD>
                        <BSTD style="text-align: left; white-space: pre-line">@x.Cn</BSTD>
                        @if (ShowTerm)
                        {
                            <BSTD style="text-align: center; white-space: pre-line">@x.Term</BSTD>
                        }
                        <BSTD style="text-align: center;">
                            <BSButton Color="BSColor.Primary" @onclick="() => Review(x)">审核</BSButton>
                        </BSTD>

                    </BSTR>
                    @foreach (var i in comments.Where(x1 => x.Line == x1.Line)) 
                     { 
                         <BSContainer style="display: flex">
                             <img src="@i.UserAvatar" height="40" width="40"/>
                             <div style="white-space: pre-line">
                                 @(i.UserName): <br/>
                                 @((MarkupString) (Markdown.ToHtml(i.Content,
                                     new MarkdownPipelineBuilder().UsePipeTables(new PipeTableOptions()).UseBootstrap().UseGridTables().Build())))
                             </div>
                         </BSContainer>
                          
                     }
                }
            }
        </BSTBody>
    </BSTable>

    


}
@if (refreshing)
{
    <BSAlert HasIcon="true" Color="BSColor.Info">刷新中..</BSAlert>
}
<BSOffCanvas @ref="_offCanvas" AllowScroll="true">
    <Header>添加审核内容</Header>
    <Content>
        <BSContainer MarginBottom="Margins.Medium" MarginTop="Margins.Medium">
            

            <BSLabel>建议改为</BSLabel>
            <BSInput InputType="InputType.TextArea" style="height: 70px" Value="@suggestionContent" @oninput="(async e => { suggestionContent = e.Value.ToString(); await RefreshReviewContent(); })" />

            <BSLabel>审查级别</BSLabel>
            @foreach (var x in Enum.GetValues<SuggestionLevel>())
            {
                <div Class="@BS.Form_Check">
                    <BSInputRadio CheckedValue="@(x)" @bind-Value="level" @onchange="() => RefreshReviewContent()"/>
                    <BSLabel IsCheckLabel="true">@x</BSLabel>
                </div>
            }
        </BSContainer>
        
        <div Class="@BS.Form_Check" MarginBottom="Margins.Small">
            <BSInputCheckbox CheckedValue="true" UnCheckedValue="false" id="y1" @bind-Value="ShowOriginalText" @onchange="() => RefreshReviewContent()" />
            <BSLabel for="y1" IsCheckLabel="true">添加原文</BSLabel>
        </div>

        <BSInput InputType="InputType.TextArea" style="height: 200px" MarginBottom="Margins.Medium" Value="@reviewContent" @oninput="(args => reviewContent = args.Value.ToString())"/>
        

        <div style="white-space: pre-line">
            @((MarkupString) (Markdown.ToHtml(reviewContent,
                new MarkdownPipelineBuilder().UsePipeTables(new PipeTableOptions()).UseBootstrap().UseGridTables().Build())))
        </div>

        <BSButton MarginTop="Margins.Medium" Color="BSColor.Primary" OnClick="() => SubmitReview()">提交</BSButton>
    </Content>
</BSOffCanvas>

<BSOffCanvas @ref="_offCanvas2" AllowScroll="true">
    <Header>审核结果</Header>
    <Content>
        <BSInput InputType="InputType.TextArea" style="height: 250px" @bind-Value="overallReviewContent" />
        <BSContainer MarginTop="Margins.Medium">
            <div Class="@BS.Form_Check">
                <BSInputRadio CheckedValue="@(ReviewResults.Comment)" @bind-Value="reviewResult"/>
                <BSLabel IsCheckLabel="true">Comment</BSLabel>
            </div>
            <div Class="@BS.Form_Check">
                <BSInputRadio CheckedValue="@(ReviewResults.Approve)" @bind-Value="reviewResult"/>
                <BSLabel IsCheckLabel="true">Approve</BSLabel>
            </div>
            <div Class="@BS.Form_Check">
                <BSInputRadio CheckedValue="@(ReviewResults.RequestChanges)" @bind-Value="reviewResult"/>
                <BSLabel IsCheckLabel="true">Request Changes</BSLabel>
            </div>
            

        </BSContainer>
        <BSButton MarginTop="Margins.Medium" Color="BSColor.Primary" OnClick="() => EndSubmitOverallReview()">提交</BSButton>
    </Content>
</BSOffCanvas>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
@code {
    string overallReviewContent = "";
    enum ReviewResults
    {
        Comment,
        Approve,
        RequestChanges
    }

    [AttributeUsage(AttributeTargets.All)]
    sealed class SuggestionAttribute : Attribute
    {
        public string Text { get; }

        public SuggestionAttribute(string text)
        {
            Text = text;
        }
    }

    SuggestionLevel level;
    enum SuggestionLevel
    {
        [Suggestion("")] None,
        [Suggestion("| **审查级别**    |\n|:-:|\n| \u2753疑问 / 需要作者确认 |\n")] Question,
        [Suggestion("| **审查级别**    |\n|:-:|\n| \u26aa 轻微 / 不阻止合并但需三思  |\n")] Minor,
        [Suggestion("| **审查级别** |\n|:-:|\n| ℹ\ufe0f 信息 / 不阻止合并  |\n")] Info,
        [Suggestion("| **审查级别** |\n|:-:|\n| \ud83d\udd35 一般 / **阻止合并** |\n")] Normal,
        [Suggestion("| **审查级别**   |\n|:-:|\n| \ud83d\udd34 严重 / **阻止合并，刻不容缓** |\n")] Critical,
        //Error
    }

    bool ShowOriginalText = true;

    ReviewResults reviewResult;
    string ReviewResult { get; set; } = "off";
    bool ShowKey = false;
    bool ShowTerm = false;
    string markdownHtml = null;
    public string[] texts = new string[0];
    public int[] indexes = new int[0];
    public LangFileWrapper[] langFiles = new LangFileWrapper[0];
    HashSet<ModVersion> versions = new();
    public int diff1from;
    public int diff1to;
    public int diff2from;
    public int diff2to;
    bool refreshing = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshTexts(true);

        refreshing = false;

        slug = PCfSlug;
        prid = PPrID.IsInt() ? PPrID.ToInt() : 0;
        InvokeAsync(StateHasChanged);
        var list = texts.ToList();
        if (PPrID.IsInt())
        {
            diff1from = Find("主库的 en 文件");
            diff1to = Find("PR 的 en 文件");
            diff2from = Find("主库的 cn 文件");
            diff2to = Find("PR 的 cn 文件");
        }

        await RunDiff();


        InvokeAsync(StateHasChanged);

        int Find(string s)
        {
            var index = list.FindIndex(x => x.Contains(s));
            return index == -1 ? 0 : index;
        }
    }

    private async Task RefreshTexts(bool firstTime)
    {
        refreshing = true;
        var textsV = texts.ToList();
        var langV = langFiles.ToList();
        if (firstTime)
        {
            textsV.Add("空白");
        }
        if (firstTime)
        {
            langV.Add(LangFileWrapper.FromLangFile(LangFile.Empty));
        }
        if (firstTime && PPrID.IsInt() && !PCfSlug.IsNullOrWhiteSpace())
        {
            await AddPr(PPrID.ToInt(), PCfSlug, textsV, langV);
        }
        if (prid != 0 && slug.NotNullNorWhiteSpace())
        {
            await AddPr(prid, slug, textsV, langV);
        }

        indexes = Enumerable.Range(0, textsV.Count).ToArray();
        texts = textsV.ToArray();
        langFiles = langV.ToArray();
        refreshing = false;
        InvokeAsync(StateHasChanged);
    }

    ModPath path;

    /// <summary>小语种文件名</summary>
    string languageFilePath { get; set; } = "";


    static HttpClient hc = new HttpClient();
    static async Task<bool> LinkExists(string link)
    {
        try
        {
            var message = await hc.SendAsync(new HttpRequestMessage(HttpMethod.Head, link));
            message.EnsureSuccessStatusCode();
            return true;
        }
        catch (HttpRequestException e)
        {
            if (e.StatusCode != HttpStatusCode.NotFound)
                Log.Warning($"LinkExists returned an unusual status code: {e.StatusCode}");
            return false;
        }
    }
    async void AddLanguage()
    {
        refreshing = true;
        var pr = await GitHub.GetPullRequest(prid);

        var textsV = texts.ToList();
        var langV = langFiles.ToList();

        try
        {
            var from = pr.Base.Sha;
            var to = pr.Head.Sha;
            var url1 = $"https://raw.githubusercontent.com/CFPAOrg/Minecraft-Mod-Language-Package/{from}/{languageFilePath}";
            var url2 = $"https://raw.githubusercontent.com/CFPAOrg/Minecraft-Mod-Language-Package/{to}/{languageFilePath}";
            if (await LinkExists(url1).ConfigureAwait(false))
            {
                var s = $"手动添加的 {languageFilePath.Split('/').Last()} （主库）";
                textsV.Add(s);
                langV.Add(LangFileWrapper.FromContent(await Download.String(url1, true)));
            }
            if (await LinkExists(url2).ConfigureAwait(false))
            {
                var s = $"手动添加的 {languageFilePath.Split('/').Last()} （PR）";
                textsV.Add(s);
                langV.Add(LangFileWrapper.FromContent(await Download.String(url2, true)));
            }
        }
        catch (Exception e)
        {
            ShowToast(e.Message);
            Log.Error(e, "UI get 小语种 language files");
        }
        finally
        {
            indexes = Enumerable.Range(0, textsV.Count).ToArray();
            texts = textsV.ToArray();
            langFiles = langV.ToArray();

            refreshing = false;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task AddPr(int pr, string pCfSlug, List<string> textsV, List<LangFileWrapper> langV)
    {
        try
        {
            var langs = await LangFileFetcher.FromPR(pr, new List<Exception>());
            var langFilePairs = langs.Where(x => x.ModPath.CurseForgeSlug == pCfSlug);
            foreach (var (fromEnFile, toEnFile, fromCnFile, toCnFile, modPath) in langFilePairs)
            {
                versions.Add(modPath.ModVersion);
                if (fromEnFile != null)
                {
                    var s = $"{pCfSlug} {modPath.ModVersion} 主库的 en 文件";
                    if (!texts.Contains(s))
                    {
                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromLangFile(fromEnFile));
                    }
                }

                if (fromCnFile != null)
                {
                    var s = $"{pCfSlug} {modPath.ModVersion} 主库的 cn 文件";
                    if (!texts.Contains(s))
                    {
                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromLangFile(fromCnFile));
                    }
                }

                if (toEnFile != null)
                {
                    var s = $"#{pr} {pCfSlug} {modPath.ModVersion} PR 的 en 文件";
                    if (!texts.Contains(s))
                    {
                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromLangFile(toEnFile));
                    }
                }

                if (toCnFile != null)
                {
                    var s = $"#{pr} {pCfSlug} {modPath.ModVersion} PR 的 cn 文件";
                    if (!texts.Contains(s))
                    {
                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromLangFile(toCnFile));
                    }
                }

                path = modPath;
            }
        }
        catch (Exception e)
        {
            ShowToast(e.Message);
            Log.Error(e, "Differ");
        }
    }

    private async Task RunDiff()
    {
        try
        {
            var html = await GenDiff();
            diffs = html;
        }
        catch (Exception e)
        {
            ShowToast(e.Message);
            Log.Error(e, "Differ");
        }
    }

    async Task<List<DiffLine>> GenDiff()
    {
        var sb = new StringBuilder();
        var o = new LangFilePair(await langFiles[diff1from].Get(), await langFiles[diff1to].Get(),
            await langFiles[diff2from].Get(), await langFiles[diff2to].Get(), path);
        

        void AddLineCn(string sourceEn, string currentEn, StringBuilder stringBuilder, string sourceCn, string currentCn)
        {
            if (sourceCn.IsNullOrWhiteSpace())
            {
                if (currentCn.IsNullOrWhiteSpace())
                {
                    stringBuilder.Append("⛔");
                }
                else
                {
                    stringBuilder.Append($"{currentCn}");
                }
            }
            else
            {
                stringBuilder.Append($"{sourceCn}\n🔽\n{currentCn}");
            }
        }
        void AddLine(string sourceEn, string currentEn, StringBuilder stringBuilder, string sourceCn, string currentCn)
        {
            if (sourceEn.IsNullOrWhiteSpace())
            {
                if (currentEn.IsNullOrWhiteSpace())
                {
                    stringBuilder.Append("⛔");
                }
                else
                {
                    stringBuilder.Append($"{currentEn}");
                }
            }
            else
            {
                if (sourceEn == currentEn)
                {
                    stringBuilder.Append($"{currentEn}");
                }
                else
                {
                    stringBuilder.Append($"{sourceEn}\n🔽\n{currentEn}");
                }
            }


        }

        var list1 = new List<DiffLine>();
            var diffLines = LangDiffer.Run(o);
            var lines = o.ToCNFile.OriginalFile.Split('\n');


            foreach (var (key, sourceEn, currentEn, sourceCn, currentCn) in diffLines)
            {
                if (sourceCn == currentCn || currentEn.IsNullOrWhiteSpace() && currentCn.IsNullOrWhiteSpace()) continue;

            var line = 1 + lines.ToList().FindIndex(x => x.Contains(key + "\"") || x.Contains(key + '='));

                AddLine(sourceEn, currentEn, sb, sourceCn, currentCn);
                var en = sb.ToString();
                sb.Clear();
                AddLineCn(sourceEn, currentEn, sb, sourceCn, currentCn);
                var cn = sb.ToString();
                sb.Clear();
                string termTextResult = "中文或英文为空";
                var termResult = currentEn != null && currentCn != null &&
                                 CommandProcessor.CheckTerms(currentEn.ToLower(), currentCn.ToLower(), out termTextResult);

                list1.Add(new DiffLine(line, key, en, cn, termTextResult));
            }


        
        comments.Clear();
        var pr = await GitHub.GetPullRequest(prid);
        var cs = await GitHub.Instance.PullRequest.ReviewComment.GetAll(Constants.RepoID, prid);
        foreach (var pullRequestReviewComment in cs)
        {
            var diffHunk = pullRequestReviewComment.DiffHunk;

            var line = diffHunk.Split("\n").Last(x => x[0] == '+');
            if (list1.FirstOrDefault(x => line.Contains(x.Key + "\"") || line.Contains(x.Key + '=')) is { } l)
            {
                bool invalid = pullRequestReviewComment.OriginalCommitId != pr.Head.Sha; 
                if (!texts[diff2to].Contains(new LangFilePath(pullRequestReviewComment.Path).ModPath.GameVersionDirectoryName + " "))
                {
                    continue;   
                }
                
                comments.Add(new PRReviewComment(pullRequestReviewComment.User.Login, (invalid ? "**注意：这个回复可能已经被 resolved，请在 GitHub 上查看。**\n": "") + pullRequestReviewComment.Body, pullRequestReviewComment.User.AvatarUrl, l.Line));
            }
        }


        return list1;
    }

    record DiffLine(int Line, string Key, string En, string Cn, string Term);
    private async Task GetModFiles()
    {
        refreshing = true;

        var textsV = texts.ToList();
        var langV = langFiles.ToList();

        try
        {
            if (slug.StartsWith("modrinth-"))
            {
                slug = slug["modrinth-".Length..];
                var addon = await ModrinthManager.GetMod(slug);
                foreach (var modVersion in versions)
                {
                    var modEnFile = await ModrinthManager.GetModEnFile(addon, modVersion.ToVersionDirectory().ToMCVersion(), LangType.EN);
                    var modCnFile = await ModrinthManager.GetModEnFile(addon, modVersion.ToVersionDirectory().ToMCVersion(), LangType.CN);

                    if (modEnFile.files != null && modEnFile.files.FirstOrDefault() is { } f2)
                    {
                        var s = $"{modCnFile.downloadFileName} 的英文语言文件";

                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromContent(f2));
                    }

                    if (modCnFile.files != null && modCnFile.files.FirstOrDefault() is {} f)
                    {
                        var s = $"{modCnFile.downloadFileName} 的中文语言文件";

                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromContent(f));
                    }
                }
                return;
            }
            else
            {
                var addon = await CurseManager.GetAddon(slug);
                foreach (var modVersion in versions)
                {
                    var modEnFile = await CurseManager.GetModEnFile(addon, modVersion.ToVersionDirectory().ToMCVersion(), LangType.EN);
                    var modCnFile = await CurseManager.GetModEnFile(addon, modVersion.ToVersionDirectory().ToMCVersion(), LangType.CN);

                    if (modEnFile.files != null && modEnFile.files.FirstOrDefault() is { } f2)
                    {
                        var s = $"{modCnFile.downloadFileName} 的英文语言文件";

                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromContent(f2));
                    }

                    if (modCnFile.files != null && modCnFile.files.FirstOrDefault() is { } f)
                    {
                        var s = $"{modCnFile.downloadFileName} 的中文语言文件";

                        textsV.Add(s);
                        langV.Add(LangFileWrapper.FromContent(f));
                    }
                }
            }
            
            
        }
        catch (Exception e)
        {
            ShowToast(e.Message);
            Log.Error(e, "UI get all mod files");
        }
        finally
        {
            indexes = Enumerable.Range(0, textsV.Count).ToArray();
            texts = textsV.ToArray();
            langFiles = langV.ToArray();

            refreshing = false;
            InvokeAsync(StateHasChanged);
        }
    }

    bool ACDedup = false;
    bool BDDedup = false;
    bool CDDedup = false;


    MCVersion? _mcVersion
    {
        get => imcVersion.IsNullOrWhiteSpace() ? MCVersion.v120 : imcVersion.ToMCVersion();
    }

    string imcVersion = " ";

    string[] mcVersions = Enum.GetValues<MCVersion>().Where(x => (int) x <= (int) MCVersion.v120fabric).Select(x => x.ToVersionString()).ToArray();


    async void AddVersion()
    {
        var v = ModVersion.FromGameVersionDirectory(_mcVersion.Value.ToVersionString());
        versions.Add(v);
        refreshing = true;
        var textsV = texts.ToList();
        var langV = langFiles.ToList();
        try
        {
            var (fromEnFile, fromCnFile) = await LangFileFetcher.FromRepo(prid, slug, v);
            if (fromEnFile != null)
            {
                var s = $"{slug} {v.ToVersionDirectory()} 主库的 en 文件";
                if (!texts.Contains(s))
                {
                    textsV.Add(s);
                    langV.Add(LangFileWrapper.FromLangFile(fromEnFile));
                }
            }

            if (fromCnFile != null)
            {
                var s = $"{slug} {v.ToVersionDirectory()} 主库的 cn 文件";
                if (!texts.Contains(s))
                {
                    textsV.Add(s);
                    langV.Add(LangFileWrapper.FromLangFile(fromCnFile));
                }
            }


            indexes = Enumerable.Range(0, textsV.Count).ToArray();
            texts = textsV.ToArray();
            langFiles = langV.ToArray();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        finally
        {
            refreshing = false;
            InvokeAsync(StateHasChanged);
        }
    }

    async Task DownloadCsv()
    {
        var list = new LangFilePair(await langFiles[diff1from].Get(), await langFiles[diff1to].Get(), await langFiles[diff2from].Get(), await langFiles[diff2to].Get(), path);
        var dir = "/app/caches/csv";
        Directory.CreateDirectory(dir);
        var path1 = dir + $"/{prid}.csv";
        var columnNames = new[] {"行号", "Key", texts[diff1from], texts[diff1to], texts[diff2from], texts[diff2to]};
        var l = new List<string[]>();
        using (var writer = new StreamWriter(File.OpenWrite(path1), new UTF8Encoding(true)))
        {
            foreach (var (key, a, b, c, d) in LangDiffer.Run(list))
            {
                var lines = list.ToCNFile.OriginalFile.Split('\n');
                var line = (1 + lines.ToList().FindIndex(x => x.Contains(key) && x.Contains(d)));
                if (ACDedup && a == c) continue;
                if (BDDedup && d == b) continue;
                if (CDDedup && c == d) continue;

                l.Add(new[] {line.ToString(), key ?? "🚫", a ?? "🚫", b ?? "🚫", c ?? "🚫", d ?? "🚫"});
            }

            CsvWriter.Write(writer, columnNames, l);
        }
        _navigationManager.NavigateTo($"https://cfpa.cyan.cafe/api/Utils/GetCsv/{prid}", true);
    }

    async Task DownloadDiff()
    {
        var dir = "/app/caches/csv";
        Directory.CreateDirectory(dir);
        var path1 = dir + $"/{prid}.md";
        File.WriteAllText(path1, "该功能关闭", Encoding.UTF8);
        _navigationManager.NavigateTo($"https://cfpa.cyan.cafe/api/Utils/GetDiff/{prid}", true);
    }

    async Task AIReview()
    {

        var sb = new StringBuilder();
        var list = new[]
        {
            new LangFilePair(await langFiles[diff1from].Get(), await langFiles[diff1to].Get(),
                await langFiles[diff2from].Get(), await langFiles[diff2to].Get(), path)
        };

        void AddLine(string sourceEn, string currentEn, StringBuilder stringBuilder, string sourceCn, string currentCn)
        {
            if (sourceEn.IsNullOrWhiteSpace())
            {
                if (currentEn.IsNullOrWhiteSpace())
                {
                    stringBuilder.Append("⛔");
                }
                else
                {
                    stringBuilder.Append($"{currentEn}");
                }
            }
            else
            {
                if (sourceEn.Trim() == currentEn.Trim())
                {
                    stringBuilder.Append($"{currentEn}");
                }
                else
                {
                    stringBuilder.Append($"{sourceEn} ==> {currentEn}");
                }
            }

            stringBuilder.Append(" | ");

            if (sourceCn.IsNullOrWhiteSpace())
            {
                if (currentCn.IsNullOrWhiteSpace())
                {
                    stringBuilder.Append("⛔");
                }
                else
                {
                    stringBuilder.Append($"{currentCn}");
                }
            }
            else
            {
                stringBuilder.Append($"{sourceCn} ==> {currentCn}");
            }
        }

        foreach (var o in list)
        {
            var diffLines = LangDiffer.Run(o);
            var lines = o.ToCNFile.OriginalFile.Split('\n');

            sb.AppendLine("| 行号 |  英文 | 中文 |");
            sb.AppendLine("| - | --: | :-------------  |");
            foreach (var (key, sourceEn, currentEn, sourceCn, currentCn) in diffLines)
            {
                if (sourceCn == currentCn || currentEn.IsNullOrWhiteSpace() && currentCn.IsNullOrWhiteSpace()) continue;

                string termTextResult = "中文或英文为空";
                var termResult = currentEn != null && currentCn != null &&
                                 CommandProcessor.CheckTerms(currentEn.ToLower(), currentCn.ToLower(), out termTextResult);
                if (!termResult) continue;

                sb.Append("| ");
                sb.Append($"{1 + lines.ToList().FindIndex(x => x.Contains(key) && x.Contains(currentCn))} | ");
                AddLine(sourceEn, currentEn, sb, sourceCn, currentCn);
                //sb.Append($" | {termTextResult.Replace("\n", "<br>")} | ");
                sb.AppendLine(" |");
            }


        }
        var bot = new ChatGpt(Constants.ChatGptApiKey, new ChatGptOptions() { BaseUrl = "https://chat.tinycms.xyz:3002", Model = "gpt-3.5-turbo-0125", MaxTokens = 1024});

        try
        {
            var ask = await bot.Ask(prompt
                                    +sb.ToString());
            markdownHtml = ask;

        }
        catch (Exception e)
        {
            markdownHtml = "Error " + Guid.NewGuid().ToString("N").Substring(0, 6);

        }

    }

    string prompt = $"你是一个Minecraft模组文本翻译审核员，以下为人工翻译的结果表格，请尽可能简要的分析错别字及翻译错误，只需要检查错误，不需要贴切，除非有特别的含义差别，不要建议近义词/句, 如果没有意见或者意见很小则不用说明那一行，如果多行错误相同则结合；告诉我的结果以自然语言呈现，不要输出同样的词语\r\n\n";
    List<DiffLine> diffs;
    BSOffCanvas _offCanvas;
    BSOffCanvas _offCanvas2;
    private async Task OpenCanvas()
    {
        if (_offCanvas != null)
            await _offCanvas.ToggleAsync();
    }
    private async Task OpenCanvas2()
    {
        if (_offCanvas2 != null)
            await _offCanvas2.ToggleAsync();
    }
    string reviewContent = "";
    int lineNumber = 0;
    ModPath modPath;
    List<PRReviewComment> comments = new List<PRReviewComment>();

    record PRReviewComment(string UserName, string Content, string UserAvatar, int Line);

    LangFilePair what;
    string suggestionContent;
    string enSource;

    async void Review(DiffLine diffLine)
    {
        if (what != null)
        {
            goto run;
        }
        var langs = await LangFileFetcher.FromPR(prid, new List<Exception>());
        what = langs.Where(x => x.ModPath.CurseForgeSlug == slug).Where(x => texts[diff2to].Contains(x.ModPath.ModVersion.ToString()+" ")).FirstOrDefault();
        run:

        var strings = what.ToCNFile.OriginalFile.Split(Environment.NewLine, StringSplitOptions.None);
        for (var i = 0; i < strings.Length; i++)
        {
            if (strings[i].Contains(diffLine.Key + "\"") || strings[i].Contains(diffLine.Key + "="))
            {
                suggestionContent = strings[i].Trim();
                lineNumber = i + 1;
                modPath = what.ModPath;
                enSource = diffLine.En;
                await RefreshReviewContent();

                await OpenCanvas();
                break;
            }
        }

    }
    string fileName = null;

    async void SubmitReview()
    {
        var pr = await GitHub.Instance.PullRequest.Get(Constants.RepoID, prid);

        var lang1 = "zh_cn";
        var l1split = lang1.Split("_");
        var lang2 = l1split[0] + "_" + l1split[1].ToUpper();

        var langFileType = modPath.MinecraftVersion switch
        {
            MinecraftVersion.v1_12 => LangFileType.Lang,
            _ => LangFileType.Json
        };

        var langFileName1 = langFileType switch
        {
            LangFileType.Json => $"{lang1}.json",
            LangFileType.Lang => $"{lang1}.lang",
            _ => throw new ArgumentOutOfRangeException()
        };
        var langFileName2 = langFileType switch
        {
            LangFileType.Json => $"{lang2}.json",
            LangFileType.Lang => $"{lang2}.lang",
            _ => throw new ArgumentOutOfRangeException()
        };
        if (fileName != null)
        {
            goto run;
        }
        var url1 = $"https://raw.githubusercontent.com/CFPAOrg/Minecraft-Mod-Language-Package/{pr.Head.Sha}/{modPath.ToPathString()}lang/{langFileName1}";
        var url2 = $"https://raw.githubusercontent.com/CFPAOrg/Minecraft-Mod-Language-Package/{pr.Head.Sha}/{modPath.ToPathString()}lang/{langFileName2}";
        if (await LinkExists(url1).ConfigureAwait(false))
        {
            fileName = langFileName1;
        }
        else if (await LinkExists(url2).ConfigureAwait(false))
        {
            fileName = langFileName2;
        }
        else
        {
            throw new Exception("Cannot find file");
        }
        run: // 这里有问题 缓存刷新
        await LoginManager.GetGitHubClient(_http).PullRequest.ReviewComment.Create(Constants.RepoID, prid,
            new SbCy(reviewContent, pr.Head.Sha, modPath.ToPathString() + "lang/" + fileName, lineNumber) { Line = lineNumber });
        await RunDiff();
        await OpenCanvas();
    }

    async void SubmitOverallReview()
    {
        await OpenCanvas2();
    }

    async void EndSubmitOverallReview()
    {
        var pr = await GitHub.GetPullRequest(prid);
        try
        {
            await LoginManager.GetGitHubClient(_http).PullRequest.Review.Create(Constants.RepoID, prid, new PullRequestReviewCreate()
            {
                Body = overallReviewContent,
                Event = reviewResult switch
                {
                    ReviewResults.Comment => PullRequestReviewEvent.Comment,
                    ReviewResults.Approve => PullRequestReviewEvent.Approve,
                    ReviewResults.RequestChanges => PullRequestReviewEvent.RequestChanges,
                    _ => throw new ArgumentOutOfRangeException()
                },
                CommitId = pr.Head.Sha,
                Comments = new List<DraftPullRequestReviewComment>() { }

            });
        }
        catch (Exception e)
        {
            ShowToast(e.Message);
        }
        
        await OpenCanvas2();
    }

    public class SbCy : PullRequestReviewCommentCreate
    {
        public SbCy(string body, string commitId, string path, int position) : base(body, commitId, path, position)
        {
        }

        public int Line { get; set; }
    }

    async Task RefreshReviewContent()
    {
        var sb = new StringBuilder();
        sb.Append(typeof(SuggestionLevel).GetMember(level.ToString()).First().GetCustomAttribute<SuggestionAttribute>().Text);
        if (ShowOriginalText)
        {
            sb.AppendLine($"\n**原文: {enSource}**\n");
        }
        if (!suggestionContent.IsNullOrWhiteSpace())
        {
            sb.AppendLine($"```suggestion\n{suggestionContent}\n```");
        }

        reviewContent = sb.ToString();
    }

}