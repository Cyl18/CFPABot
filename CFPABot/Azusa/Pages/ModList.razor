@page "/ModList"
@using GammaLibrary
@using System.IO
@using CFPABot.DiffEngine
@using CFPABot.Utils
@using CurseForge.APIClient.Models.Mods
@using Serilog
<h3>ModList</h3>
<BSAlert HasIcon="true" Color="BSColor.Info" MarginBottom="Margins.Medium">请使用 Ctrl+F 搜索（</BSAlert>
<BSLabel MarginBottom="Margins.Medium">共有 @ModListConfig.Instance.ModLists.Count 个模组</BSLabel>
<BSPagination Pages="@(ModListConfig.Instance.ModLists.Count / perPage + 1)" @bind-Value="Page" MarginBottom="Margins.Medium"/>
@code
{
    int Page = 1;
    int perPage = 500;
}
<BSTable IsResponsive="true" IsStriped="true">
    <BSTHead>
        <BSTR>
            <BSTD>Mod Slug + Domain</BSTD>
            <BSTD>Mod Name</BSTD>
            <BSTD>Versions</BSTD>
        </BSTR>
    </BSTHead>

    <BSTBody>
        @foreach (var x in ModListConfig.Instance.ModLists.Skip((Page - 1) * perPage).Take(perPage))
        {
            <BSTR>
                <BSTD><BSLink Url="@x.curseForgeLink" target="_blank">@x.modSlug</BSLink> #@x.modDomain</BSTD>
                <BSTD>@(x.modName ?? "[无法获取]")</BSTD>
                <BSTD>
                        <BSCol>
                    @foreach (var y in x.versions)
                    {
                        <BSRow>@y.version: <BSLink Url="@y.repoLink" target="_blank">🔗主库链接</BSLink></BSRow>
                    }
                        </BSCol>
                </BSTD>
            </BSTR>
        }
        

    </BSTBody>
</BSTable>
<BSPagination  Pages="@(ModListConfig.Instance.ModLists.Count / perPage + 1)" @bind-Value="Page" MarginTop="Margins.Medium"/>


@code {

    public class ModListCache
    {
        public static async Task Refresh(bool force = false)
        {
            if (!File.Exists("config/mod-list-in-repo.json") ||
                (DateTime.Now - ModListConfig.Instance.LastTime).TotalDays > 1.999 || force)
            {
                using var repo = new ForkRepoManager(GitHub.GetToken());
                repo.Clone(Constants.Owner, Constants.RepoName, "Cyl18", "whatever@gmail.com");
                var hs = new HashSet<ModPath>();
                var list = new List<LangFilePath>();
                var dic = new Dictionary<string, Mod>();
                foreach (var file in Directory.EnumerateFiles(Path.Combine(repo.WorkingDirectory, "projects"), "*.*", SearchOption.AllDirectories).Where(isValidName))
                {
                    var relativePath = Path.GetRelativePath(repo.WorkingDirectory, file);
                    LangFilePath langFilePath;
                    try
                    {
                        langFilePath = new LangFilePath(relativePath);
                    }
                    catch (Exception)
                    {
                        continue;
                    }
                    if (langFilePath.LangType == LangType.CN && File.ReadAllText(Path.Combine(repo.WorkingDirectory, langFilePath.RawPath)).Trim() != "{}" && hs.Add(langFilePath.ModPath))
                    {
                        list.Add(langFilePath);
                    }
                }
                
                
                var cfIds = new HashSet<int>();
                foreach (var langFilePath in list)
                {
                    try
                    {
                        cfIds.Add(CurseManager.MapModIDToProjectID(langFilePath.ModPath.CurseForgeSlug));
                    }
                    catch (Exception e)
                    {
                    }
                }

                var cfMods = await CurseManager.GetCfClient().GetModsByIdListAsync(
                    new GetModsByIdsListRequestBody(){ModIds = cfIds.ToList()});
                foreach (var mod in cfMods.Data)
                {
                    dic[mod.Slug] = mod;
                }
                var models = new List<ModListModel>();
                foreach (var modPath in list.DistinctBy(x => x.ModPath.CurseForgeSlug)
                    .OrderBy(x => x.ModPath.CurseForgeSlug)
                    .Where(x => !x.ModPath.CurseForgeSlug.StartsWith("0-") && x.ModPath.CurseForgeSlug != "1UNKNOWN"))
                {
                    var versions = new List<(ModVersion version, string repoLink)>();
                    foreach (var path in list.Where(x => x.ModPath.CurseForgeSlug == modPath.ModPath.CurseForgeSlug)
                        .OrderBy(x => x.ModPath.ModVersion))
                    {
                        versions.Add((path.ModPath.ModVersion, $"https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/tree/main/{path.ModPath.ToPathString()}lang/"));
                    }
                    
                    
                    models.Add(new ModListModel(
                        modPath.ModPath.CurseForgeSlug,
                        dic.GetValueOrDefault(modPath.ModPath.CurseForgeSlug)?.Name,
                        modPath.ModPath.ModDomain,
                        dic.GetValueOrDefault(modPath.ModPath.CurseForgeSlug)?.Links.WebsiteUrl,
                        versions
                        ));
                }
                ModListConfig.Instance.ModLists = models;
                ModListConfig.Instance.LastTime = DateTime.Now;
                ModListConfig.Save();
                Log.Information("Mod list refresh complete.");
            }
        }

        public record ModListModel(string modSlug, string modName, string modDomain,string curseForgeLink, List<(ModVersion version, string repoLink)> versions);
        static bool isValidName(string s)
        {
            var p = Path.GetFileName(s);
            return p.Equals("zh_cn.json", StringComparison.OrdinalIgnoreCase) || 
                   p.Equals("en_us.json", StringComparison.OrdinalIgnoreCase) ||
                   p.Equals("zh_cn.lang", StringComparison.OrdinalIgnoreCase) ||
                   p.Equals("en_us.lang", StringComparison.OrdinalIgnoreCase);
        }
    }
    
    [ConfigurationPath("config/mod-list-in-repo.json")]
    public class ModListConfig : Configuration<ModListConfig>
    {
        public DateTime LastTime { get; set; } = DateTime.Now - TimeSpan.FromDays(2);
        public List<ModListCache.ModListModel> ModLists { get; set; }
    }
}