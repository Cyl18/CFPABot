@page "/ModList"
@using GammaLibrary
@using System.IO
@using CFPABot.DiffEngine
@using CFPABot.Utils
@using CurseForge.APIClient.Models.Mods
@using GammaLibrary.Extensions
@using Serilog
@inject IJSRuntime JsRuntime

<h2 @ref="AddSectionRef">ModList</h2>
<BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">
    <span class="@BS.Input_Group_Text">搜索内容</span>
    <BSInput InputType="InputType.Text" OnValueChange="(x) => searchWord = x" TValue="string"  @onkeydown="OnSearchPressKey"/>
    <BSButton Color="BSColor.Info" OnClick="() => Search()">搜索！</BSButton>
</BSInputGroup>
<BSLabel MarginBottom="Margins.Medium">共有 @ModListConfig.Instance.ModLists.Count 个模组</BSLabel>
<BSLabel MarginBottom="Margins.Medium">搜索后共有 @FilteredMods.Count 个模组</BSLabel>
<BSPagination Pages="@(pages / perPage + 1)" @bind-Value="Page" MarginBottom="Margins.Medium"/>
@code
{
    string searchWord = "";
    int Page = 1;
    int perPage = 555;
    int pages => FilteredMods.Count;
    List<(string searchWord, ModListCache.ModListModel)> Mods;
    List<ModListCache.ModListModel> FilteredMods;

    protected override void OnInitialized()
    {
        Mods = BuildCache();
        Search();
    }

    private static List<(string searchWord, ModListCache.ModListModel)> BuildCache()
    {
        var s = new List<(string searchWord, ModListCache.ModListModel)>();
        foreach (var w in ModListConfig.Instance.ModLists)
        {
            s.Add(($"{Normalize(w.modSlug)}|" +
                   $"{Normalize(w.modDomain)}|" +
                   $"{Normalize(w.modName)}|" +
                   $"{Normalize(w.versions.Select(x => x.version.ToString()).Aggregate((a,b)=>a+"x"+b))}"
                , w));
        }
        return s;
    }

    private void Search()
    {
        if (searchWord.IsNullOrWhiteSpace())
        {
            FilteredMods = Mods.Select(x => x.Item2).ToList();
            return;
        }
        var normalizedSearchText = Normalize(searchWord);
        FilteredMods = Mods.Where(x => x.searchWord.Contains(normalizedSearchText)).Select(x => x.Item2).ToList();
        Page = 1;
    }
    private static string Normalize(string s)
    {
        if (s == null) return s;
        
        var l = s.ToLowerInvariant().ToCharArray().ToList();
        l.RemoveAll(x => x == ' ' || !char.IsLetterOrDigit(x));
        return new string(l.ToArray());
    }

}
<BSTable IsResponsive="true" IsStriped="true">
    <BSTHead>
        <BSTR>
            <BSTD>Mod Slug + Domain</BSTD>
            <BSTD>Mod Name</BSTD>
            <BSTD>Versions</BSTD>
        </BSTR>
    </BSTHead>

    <BSTBody>
        @foreach (var x in FilteredMods.Skip((Page - 1) * perPage).Take(perPage))
        {
            <BSTR>
                <BSTD><a href="@x.curseForgeLink" target="_blank">@x.modSlug</a> #@x.modDomain</BSTD>
                <BSTD>@(x.modName ?? "[无法获取]")</BSTD>
                <BSTD>
                        <BSCol>
                    @foreach (var y in x.versions)
                    {
                        <BSRow>@y.version: <a href="@y.repoLink" target="_blank">🔗主库链接</a></BSRow>
                    }
                        </BSCol>
                </BSTD>
            </BSTR>
        }
        

    </BSTBody>
</BSTable>
<BSPagination  Pages="@(pages / perPage + 1)" @bind-Value="Page" MarginTop="Margins.Medium"/>


@code {
    ElementReference AddSectionRef { get; set; }
    int lastPage = 1;


    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (lastPage != Page)
        {
            await JsRuntime.InvokeVoidAsync("ScrollElementIntoView", AddSectionRef);
            lastPage = Page;
        }
    }
    public class ModListCache
    {
        public static async Task Refresh(bool force = false)
        {
            if (!File.Exists("config/mod-list-in-repo.json") ||
                (DateTime.Now - ModListConfig.Instance.LastTime).TotalDays > 1.999 || force)
            {
                using var repo = new ForkRepoManager(GitHub.GetToken());
                repo.Clone(Constants.Owner, Constants.RepoName, "Cyl18", "whatever@gmail.com");
                var hs = new HashSet<ModPath>();
                var list = new List<LangFilePath>();
                var dic = new Dictionary<string, Mod>();
                foreach (var file in Directory.EnumerateFiles(Path.Combine(repo.WorkingDirectory, "projects"), "*.*", SearchOption.AllDirectories).Where(isValidName))
                {
                    var relativePath = Path.GetRelativePath(repo.WorkingDirectory, file);
                    LangFilePath langFilePath;
                    try
                    {
                        langFilePath = new LangFilePath(relativePath);
                    }
                    catch (Exception)
                    {
                        continue;
                    }
                    if (langFilePath.LangType == LangType.CN && File.ReadAllText(Path.Combine(repo.WorkingDirectory, langFilePath.RawPath)).Trim() != "{}" && hs.Add(langFilePath.ModPath))
                    {
                        list.Add(langFilePath);
                    }
                }
                
                
                var cfIds = new HashSet<int>();
                foreach (var langFilePath in list)
                {
                    try
                    {
                        cfIds.Add(CurseManager.MapModIDToProjectID(langFilePath.ModPath.CurseForgeSlug));
                    }
                    catch (Exception e)
                    {
                    }
                }

                var cfMods = await CurseManager.GetCfClient().GetModsByIdListAsync(
                    new GetModsByIdsListRequestBody(){ModIds = cfIds.ToList()});
                foreach (var mod in cfMods.Data)
                {
                    dic[mod.Slug] = mod;
                }
                var models = new List<ModListModel>();
                foreach (var modPath in list.DistinctBy(x => x.ModPath.CurseForgeSlug)
                    .OrderBy(x => x.ModPath.CurseForgeSlug)
                    .Where(x => !x.ModPath.CurseForgeSlug.StartsWith("0-") && x.ModPath.CurseForgeSlug != "1UNKNOWN"))
                {
                    var versions = new List<(ModVersion version, string repoLink)>();
                    foreach (var path in list.Where(x => x.ModPath.CurseForgeSlug == modPath.ModPath.CurseForgeSlug)
                        .OrderBy(x => x.ModPath.ModVersion))
                    {
                        versions.Add((path.ModPath.ModVersion, $"https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/tree/main/{path.ModPath.ToPathString()}lang/"));
                    }
                    
                    
                    models.Add(new ModListModel(
                        modPath.ModPath.CurseForgeSlug,
                        dic.GetValueOrDefault(modPath.ModPath.CurseForgeSlug)?.Name,
                        modPath.ModPath.ModDomain,
                        dic.GetValueOrDefault(modPath.ModPath.CurseForgeSlug)?.Links.WebsiteUrl,
                        versions
                        ));
                }
                ModListConfig.Instance.ModLists = models;
                ModListConfig.Instance.LastTime = DateTime.Now;
                ModListConfig.Save();
                Log.Information("Mod list refresh complete.");
            }
        }

        public record ModListModel(string modSlug, string modName, string modDomain,string curseForgeLink, List<(ModVersion version, string repoLink)> versions);
        static bool isValidName(string s)
        {
            var p = Path.GetFileName(s);
            return p.Equals("zh_cn.json", StringComparison.OrdinalIgnoreCase) || 
                   p.Equals("en_us.json", StringComparison.OrdinalIgnoreCase) ||
                   p.Equals("zh_cn.lang", StringComparison.OrdinalIgnoreCase) ||
                   p.Equals("en_us.lang", StringComparison.OrdinalIgnoreCase);
        }
    }
    
    [ConfigurationPath("config/mod-list-in-repo.json")]
    public class ModListConfig : Configuration<ModListConfig>
    {
        public DateTime LastTime { get; set; } = DateTime.Now - TimeSpan.FromDays(2);
        public List<ModListCache.ModListModel> ModLists { get; set; }
    }


    void OnSearchPressKey(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Search();
        }
    }

}