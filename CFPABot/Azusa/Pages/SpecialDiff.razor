@page "/SpecialDiff"
@using CFPABot.Utils
@using DiffPatch.Data
@using Microsoft.AspNetCore.Http
@using Octokit
@using System.Text
@using System.IO
@using BlazorStrap.V5
@using CFPABot.Azusa.Pages
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject IBlazorStrap _blazorStrap
@inject IHttpContextAccessor _http
@inject NavigationManager _navigationManager
@implements System.IDisposable
@inject IJSRuntime js
<h3>SpecialDiff</h3>
<BSToaster />

<PageTitle>特殊 Diff</PageTitle>



@code {
    int step = 0;
    int? prid = null;
    ForkRepoManager forkRepo;
    FileDiff[] diff;
    PullRequest pr;
    string enDir;
    string cnDir;
    string cnT;
    string enT;
    bool loading = false;
    List<(string fileName, string en, string cn, List<PullRequestReviewComment> comments, string filePath, PullRequest pr)?> model = new();
    IReadOnlyList<PullRequestReviewComment> suggestions;
    string[] endirs;
    string[] cndirs;
    string en;
    string cn;

    void ShowToast(string text)
    {
        InvokeAsync((() =>
        {
            _blazorStrap.Toaster.Add("警告", text, o =>
            {
                o.Color = BSColor.Warning;
                o.HasIcon = true;
                o.Toast = Toast.TopRight;
            });
        }));
    }

    void BuildCache()
    {
        foreach (var enFilePath in Directory.GetFiles(enDir, "*.*", SearchOption.AllDirectories))
        {
            var cnFilePath = Flip(enFilePath);
            if (enFilePath == cnFilePath) model.Add(null);
            var fileName = Path.GetRelativePath(enDir, enFilePath);
            model.Add((fileName, File.ReadAllText(enFilePath), File.ReadAllText(cnFilePath), suggestions.Where(x => x.Path.EndsWith(fileName)).ToList(), Path.GetRelativePath(forkRepo.WorkingDirectory, cnFilePath), pr));
        }
    }

    async void CloneRepo()
    {
        try
        {
            loading = true;
            await InvokeAsync(StateHasChanged);

            forkRepo = new ForkRepoManager(Constants.GitHubOAuthToken);

            pr = await GitHub.GetPullRequest(prid.Value).ConfigureAwait(false);
            var t3 = Task.Run(async () => { diff = await GitHub.Diff(prid.Value).ConfigureAwait(false); });
            var t2 = Task.Run(() => { forkRepo.Clone(pr.Head.User.Login, pr.Head.Repository.Name, branch: pr.Head.Ref); });

            await t2;
            await t3;

            cn = diff.FirstOrDefault(x => x.To.Split('/').Any(y => y.Equals("zh_cn", StringComparison.OrdinalIgnoreCase)))?.To;
            en = diff.FirstOrDefault(x => x.To.Split('/').Any(y => y.Equals("en_us", StringComparison.OrdinalIgnoreCase)))?.To;
            if (cn == null || en == null)
            {
                ShowToast("找不到中文或英文文件夹");
                return;
            }

            cndirs = diff.Where(x => x.To.Split('/').Any(y => y.Equals("zh_cn", StringComparison.OrdinalIgnoreCase))).Select(x => Traverse(x.To)).Distinct().ToArray();
            endirs = diff.Where(x => x.To.Split('/').Any(y => y.Equals("en_us", StringComparison.OrdinalIgnoreCase))).Select(x => Traverse(x.To)).Distinct().ToArray();
            cn = cndirs.First();
            en = endirs.First();

            if (cndirs.Length == 1)
            {
                Step2();
                return;
            }

            step++;
            InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            ShowToast(e.Message);
        }
        finally
        {
            loading = false;
        }
    }

    async void Step2()
    {
        enT = Traverse(en);
        cnT = Traverse(cn);
        if (cnT == null || enT == null)
        {
            ShowToast($"找不到中文或英文文件夹\nen: {en}\ncn:{cn}");
            return;
        }

        enDir = Path.Combine(forkRepo.WorkingDirectory, enT);
        cnDir = Path.Combine(forkRepo.WorkingDirectory, cnT);
        suggestions = await GitHub.InstancePersonal.PullRequest.ReviewComment.GetAll(Constants.RepoID, prid.Value);
        BuildCache();

        step = 2;
        InvokeAsync(StateHasChanged);

    }

    string Flip(string str)
    {
        return str.Replace(enT, cnT);
    }

    string Traverse(string str)
    {
        var s = str.Split('/');
        var sb = new StringBuilder();
        var flag = false;
        foreach (var s1 in s)
        {
            sb.Append(s1 + "/");
            if (s1.Equals("zh_cn", StringComparison.OrdinalIgnoreCase) || s1.Equals("en_us", StringComparison.OrdinalIgnoreCase))
            {
                flag = true;
                break;
            }
        }
        if (flag)
        {
            return sb.ToString().TrimEnd('/');
        }
        else
        {
            return null;
        }
    }

    public void Dispose()
    {
        forkRepo?.Dispose();
    }

}

@if (step == 0)
{
    @if (!LoginManager.GetLoginStatus(_http))
    {
        <BSAlert Color="BSColor.Danger" HasIcon="true">警告：登录后才可以提交审核，你可以去主页登录</BSAlert>
    }

    <BSInputGroup Size="Size.Medium" MarginBottom="Margins.Medium">
        <span class="@BS.Input_Group_Text">PRID</span>
        <BSInput TValue="int?" InputType="InputType.Number" @bind-Value="prid" />
        @if (!loading)
        {
            <BSButton OnClick="CloneRepo" Color="BSColor.Primary">开始</BSButton>
        }
        else
        {
            <BSLabel>加载中！</BSLabel>
        }
    </BSInputGroup>

}

@if (step == 1)
{
    <BSCard Class="fade-in" CardType="CardType.Card" style="width: 46rem;" MarginTop="Margins.Medium">
        <BSCard CardType="CardType.Body">
            <BSLabel>选择对应的文件夹：</BSLabel>

            <BSInput InputType="InputType.Select" @bind-Value="en" MarginBottom="Margins.Medium">
                @foreach (var i in endirs)
                {
                    <option value="@i">@i</option>
                }
            </BSInput>
            
            <BSInput InputType="InputType.Select" @bind-Value="cn" MarginBottom="Margins.Medium">
                
                @foreach (var i in cndirs)
                {
                    <option value="@i">@i</option>
                }
            </BSInput>
            
            <BSButton OnClick="() => Step2()">OK!</BSButton>
            <BSCol>
                基础文件路径:
                <code>@(Path.GetRelativePath(forkRepo.WorkingDirectory, en))</code>
            </BSCol>
        </BSCard>
    </BSCard>
}


@if (step == 2)
{
    <BSCard Class="fade-in" CardType="CardType.Card" style="width: 32rem;" MarginTop="Margins.Medium">
        <BSCard CardType="CardType.Body">
            <BSCol>
                基础文件路径:
                <code>@(Path.GetRelativePath(forkRepo.WorkingDirectory, enDir))</code>
            </BSCol>
        </BSCard>
    </BSCard>

        @foreach (var flight in model)
        {
            <BSCard Class="fade-in" CardType="CardType.Card" MarginTop="Margins.Large" style="width: 80vw;">
                <BSCard CardType="CardType.Body">
                    @if (flight == null)
                    {
                        <BSLabel>这个文件没有对应的中文文件.</BSLabel>
                    }
                    else
                    {
                        <SpecialDiffSegment FileName="@flight.Value.fileName" CnFile="@flight.Value.cn" EnFile="@flight.Value.en" Comments="@flight.Value.comments" GitHubClient="@LoginManager.GetGitHubClient(_http)" FilePath="@flight.Value.filePath" PR="pr"/>

                    }
                </BSCard>
            </BSCard>
        }



}